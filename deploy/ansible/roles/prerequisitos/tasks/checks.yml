# Copyright (C) 2018 Freetech Solutions

# This file is part of OMniLeads

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.
#
---

# Incluye variables para centos o amazon linux
- name: Include centos variables
  include_vars: group_vars/centos_vars.yml
  tags: always
  when: ansible_distribution != "Amazon"

- name: Include Amazon Linux variables
  include_vars: group_vars/amazon_linux_vars.yml
  tags: always
  when: ansible_distribution == "Amazon"

########################################################################
# Chequeos de red, de servicios instalados, folders y archivos creados #
########################################################################

# Obtengo hostname del nodo
- name: Get the hostname of node
  command: hostname
  register: hostname
  tags: always
  changed_when: false

# Seteo variable omni_fqdn con hostname obtenido
- set_fact: omni_fqdn="{{ hostname.stdout }}"
  tags: always
  changed_when: false

# Obtengo IP privada del nodo
- name: Get IP adress of node (selfhosted)
  set_fact: omni_ip={{ hostvars[inventory_hostname]['ansible_' + iface]['ipv4']['address'] }}
  when: iface != "none"
  tags: always

# Obtengo IP publica del nodo
- name: Get public IP address of node
  shell: curl http://ipinfo.io/ip
  register: public_ip
  tags: always

# Valido si lo que devolvió la tarea anterior es una IP
- name: Validate IP public obtained
  shell: if [[ {{ public_ip.stdout }} =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then echo 0; else echo 1; fi
  args:
    executable: /bin/bash
  register: ip_val
  tags: always
  failed_when: false

# Si no es una IP tiro este mensaje de error
- fail:
    msg: "The public IP obtained is wrong, check in shell if you obtain a public IP with this command 'curl http://ipinfo.io/ip', after that please run the script again"
  when: ip_val.stdout != '0'
  tags: always

# Comparo si la IP ingresada en el inventory es el mismo  de el nodo
- name: Compare if IP in inventory file is configured in the server
  assert:
    that: "'{{ omni_ip }}' in ansible_all_ipv4_addresses"
    msg: "The IP you inserted in inventory file is wrong, check it"
  when: iface == "none"
  changed_when: false
  tags: always

# Me aseguro que se quiera instalar OML esté dentro de los SO permitidos.
- name: Print omni_distribution
  debug: msg="omni_distribution es {{ ansible_os_family }}"
  changed_when: false
  when: is_docker == "false"
  tags: always

# Si no es asi, esta task generara un error esto es para AIO
- name: Check omni_distribution
  fail: msg="omni_distribution con valor {{ ansible_os_family }} es invalida"
  when: ansible_os_family != "RedHat" and ansible_os_family != "Sangoma" and prodenv == 1
  changed_when: false
  tags: always

# Obtengo distro para PE, aca lo hago viendo el NAME del archivo os-release, asi obtengo la variable docker_distribution
- name: Get specific Linux distribution
  shell: awk -F= '/^NAME/{print $2}' /etc/os-release
  register: docker_distribution
  tags: docker_deploy

# Chequeo si la version de virtualenv instalada es {{ virtualenv_version }}
- name: Check if virtualenv {{ virtualenv_version }} is installed
  shell:  yum list installed |grep virtualenv| awk -F " " '{print $2}' |awk -F "-" '{print $1}'
  register: virtualenv_installed
  changed_when: false
  tags: postinstall

  # Chequeo si la version de asterisk instalada es {{ asterisk_version }}
- name: Check if Asterisk {{ asterisk_version }} is installed
  shell:  yum list installed |grep asterisk| awk -F " " '{print $2}' |awk -F "-" '{print $1}'
  changed_when: false
  register: asterisk_installed
  tags: ['asterisk','postinstall']

# Chequeo si la version de asterisk instalada es {{ postgresql_version }}
- name: Check if posgresql-{{ postgresql_version }} is installed
  shell:  bash -lc 'output=` find /usr -wholename '*/bin/postgres'`; if [[ $output == *"{{ postgresql_old_version }}"* ]]; then exit 2; elif [[ $output == *"{{ postgresql_version }}"* ]]; then exit 3; else exit 1; fi'
  failed_when: false
  register: postgresql_new_installed
  tags: ['database','postinstall','docker_deploy']

# Chequeo si la version de rtpengine instalada es {{ rtpengine_version }}
- name: Check if Rtpengine-mr{{ rtpengine_version }} is installed
  shell:  yum list installed |grep rtpengine| awk -F " " '{print $2}' |awk -F "-" '{print $1}'
  changed_when: false
  register: rtpengine_installed
  tags: ['kamailio','docker_deploy','postinstall']

# Chequeo si la version de kamailio instalada es {{ kamailio_version }}
- name: Check if Kamailio {{ kamailio_version }} is installed
  shell:  yum list installed |grep kamailio| awk -F " " '{print $2}' |awk -F "-" '{print $1}'
  changed_when: false
  register: kamailio_installed
  tags: ['kamailio','postinstall']

# Chequeo si existen ya los archivos custom y override dialplan, para no pisarlos
- name: Check if custom and override files for dialplan exists
  shell: "if [ $(ls -l {{ asterisk_location}}/etc/asterisk/oml_extensions_*_override.conf 2>/dev/null | wc -l) -gt 0 ] && [ $(ls -l {{ asterisk_location}}/etc/asterisk/oml_extensions_*_custom.conf 2>/dev/null | wc -l) -gt 0 ]; then exit 0; else exit 1; fi"
  changed_when: false
  failed_when: false
  register: ast_custom_exists
  tags: always

- name: Set name of trusted certificate as ansible variable
  set_fact: "{{ item.var }}={{ item.value }}"
  with_items:
    - { var: cert, value: "{{ trusted_cert }}" }
    - { var: key, value: "{{ trusted_key }}" }
  when: trusted_key is defined and trusted_cert is defined
  tags: always

######################################################################################################
# Chequeo de variables de entorno:                                                                   #
# Se hace para que no sea necesario volver a ingresar las variables en el inventory al hacer upgrade #
# Las tasks que no estan comentadas siguen este patrón                                               #
# 1. # Chequeo si existe $ENVAR, equivale al parametro del inventory                                 #
# 2. Si el comando anterior retornó 0, se setea parametro de inventory con el valor de $ENVAR        #
# 3. Si el comando anterior retorna 1, no hace nada                                                  #
# 4. Si alguna $ENVAR no está declarada y no se seteó el parametro del inventory quiere decir que    #
# el usuario olvidó agregar algún parametro y deveolverá un mensaje de error diciendole que variable #
#  faltó                                                                                             #
######################################################################################################

- name: Check if $TZ was defined previously
  shell: bash -lc 'if [ -z $TZ ]; then exit 1; else echo $TZ; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_tz
  tags: always

- set_fact: TZ="{{ assert_tz.stdout }}"
  when: assert_tz.rc == 0 and TZ is not defined
  tags: always

- name: Check if $PGUSER was defined previously
  shell: bash -lc 'if [ -z $PGUSER ]; then exit 1; else echo $PGUSER; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_pguser
  tags: always

- set_fact: postgres_user="{{ assert_pguser.stdout }}"
  when: assert_pguser.rc == 0 and postgres_user is not defined
  tags: always

- name: Check if $PGPASSWORD was defined previously
  shell: bash -lc 'if [ -z $PGPASSWORD ]; then exit 1; else echo $PGPASSWORD; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_pgpass
  tags: always

- set_fact: postgres_password="{{ assert_pgpass.stdout }}"
  when: assert_pgpass.rc == 0 and postgres_password is not defined
  tags: always

- name: Check if $PGPORT was defined previously
  shell: bash -lc 'if [ -z $PGPORT ]; then exit 1; else echo $PGPORT; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_pgport
  tags: always

- set_fact: postgres_port="{{ assert_pgport.stdout }}"
  when: assert_pgport.rc == 0 and postgres_port is not defined
  tags: always

- set_fact: postgres_port=5432
  when: assert_pgport.rc == 1 and postgres_port is not defined
  tags: always

- name: Check if $AMI_USER was defined previously
  shell: bash -lc 'if [ -z $AMI_USER ]; then exit 1; else echo $AMI_USER; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_amiuser
  tags: always

- set_fact: ami_user="{{ assert_amiuser.stdout }}"
  when: assert_amiuser.rc == 0 and ami_user is not defined
  tags: always

- name: Check if $AMI_PASSWORD was defined previously
  shell: bash -lc 'if [ -z $AMI_PASSWORD ]; then exit 1; else echo $AMI_PASSWORD; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_amipass
  tags: always

- set_fact: ami_password="{{ assert_amipass.stdout }}"
  when: assert_amipass.rc == 0 and ami_password is not defined
  tags: always

- name: Check if $WOMBAT_USER was defined previously
  shell: bash -lc 'if [ -z $WOMBAT_USER ]; then exit 1; else echo $WOMBAT_USER; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_wombatuser
  tags: always

- set_fact: dialer_user="{{ assert_wombatuser.stdout }}"
  when: assert_wombatuser.rc == 0 and dialer_user is not defined
  tags: always

- name: Check if $WOMBAT_PASSWORD was defined previously
  shell: bash -lc 'if [ -z $WOMBAT_PASSWORD ]; then exit 1; else echo $WOMBAT_PASSWORD; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_wombatpass
  tags: always

- set_fact: dialer_password="{{ assert_wombatpass.stdout }}"
  when: assert_wombatpass.rc == 0 and dialer_password is not defined
  tags: always

- name: Check if $SESSION_COOKIE_AGE was defined previously
  shell: bash -lc 'if [ -z $SESSION_COOKIE_AGE ]; then exit 1; else echo $SESSION_COOKIE_AGE; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_sca
  tags: always

- set_fact: SCA="{{ assert_sca.stdout }}"
  when: assert_sca.rc == 0 and SCA is not defined
  tags: always

- name: Check if $EPHEMERAL_USER_TTL was defined previously
  shell: bash -lc 'if [ -z $EPHEMERAL_USER_TTL ]; then exit 1; else echo $EPHEMERAL_USER_TTL; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_ecctl
  tags: always

- set_fact: ECCTL="{{ assert_ecctl.stdout }}"
  when: assert_ecctl.rc == 0 and ECCTL is not defined
  tags: always

- name: Check if $MONITORFORMAT was defined previously
  shell: bash -lc 'if [ -z $MONITORFORMAT ]; then exit 1; else echo $MONITORFORMAT; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_monitorformat
  tags: always

- set_fact: MONITORFORMAT="{{ assert_monitorformat.stdout }}"
  when: assert_monitorformat.rc == 0 and MONITORFORMAT is not defined
  tags: always

- name: Get mysql root password of Issabel
  shell: cat /etc/issabel.conf | grep mysqlrootpwd |awk -F "=" '{print $2}'
  when: docker_distribution.stdout == '"Issabel PBX"'
  register: issabel_mysql_root_pass
  tags: ['never', 'docker_deploy']

- name: Set mysql_root_password_variable for issabel
  set_fact: mysql_root_password="{{ issabel_mysql_root_pass.stdout }}"
  when: docker_distribution.stdout == '"Issabel PBX"'
  tags: ['never', 'docker_deploy']

# Chequea si timezone esta definido
- name: Check if TimeZone variable is defined
  fail:
    msg: TimeZone variable undefined, edit TZ variable in inventory file
  when: TZ is not defined and assert_tz.rc == 1
  tags: always

- name: Check if postgres user variable is defined
  fail:
    msg: Postgres user undefined, edit postgres_user in inventory file
  when: postgres_user is not defined and assert_pguser.rc == 1
  tags: always

- name: Check if postgres password variable is defined
  fail:
    msg: Postgres password undefined, edit postgres_password in inventory file
  when: postgres_password is not defined and assert_pgpass.rc == 1
  tags: always

- name: Check if AMI user variable is defined
  fail:
    msg: AMI user undefined, edit ami_user in inventory file
  when: ami_user is not defined and assert_amiuser.rc == 1
  tags: always

- name: Check if AMI password variable is defined
  fail:
    msg: AMI password undefined, edit ami_password in inventory file
  when: ami_password is not defined and assert_amipass.rc == 1
  tags: always

- name: Check if WD user variable is defined
  fail:
    msg: WD user undefined, edit dialer_user in inventory file
  when: dialer_user is not defined and assert_dialeruser.rc == 1
  tags: always

- name: Check if WD pass variable is defined
  fail:
    msg: WD pass undefined, edit dialer_password in inventory file
  when: dialer_password is not defined and assert_dialerpass.rc == 1
  tags: always
