# Copyright (C) 2018 Freetech Solutions

# This file is part of OMniLeads

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License version 3, as published by
# the Free Software Foundation.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.

---
# OMniLeads installation playbook
# It uses the files group_vars/all and inventory, as environment variables
# It uses the file /var/tmp/ansible/ansible.cfg, as configuration file
# Things to take into account:
# https://docs.ansible.com/ansible/2.9/user_guide/playbooks_conditionals.html
# https://docs.ansible.com/ansible/2.9/user_guide/playbooks_loops.html
# https://docs.ansible.com/ansible/2.9/intro_configuration.html
# https://docs.ansible.com/ansible/2.5/user_guide/playbooks_reuse_roles.html

- name: OMniLeads installation
  hosts: prodenv-aio
  gather_facts: True
  roles:
    - prerequisitos

- import_playbook: modules/redis/deploy/redis.yml
  when: redis_host == "localhost"
- import_playbook: modules/postgresql/deploy/postgresql.yml
  when: postgres_host == "localhost"
- import_playbook: modules/rtpengine/deploy/rtpengine.yml
  when: rtpengine_host == "127.0.0.1"
- import_playbook: modules/kamailio/deploy/kamailio.yml
  when: kamailio_host == omni_fqdn
- import_playbook: modules/websockets/deploy/websockets.yml
  when: websocket_host == "localhost"
- import_playbook: modules/nginx/deploy/nginx.yml
- import_playbook: modules/asterisk/deploy/asterisk.yml
  when: asterisk_host == omni_ip

- name: OMniLeads application installation
  hosts: prodenv-aio
  tasks:

  # Install PostgreSQL utilities
  - name: Install PostgreSQL utilities {{ postgresql_version }} (from s3 source)
    command: yum install -y {{ packages_url }}/postgresql/postgresql{{ postgresql_version}}{{ item }}.rpm
    #yum: name={{ packages_url }}/postgresql/postgresql{{ postgresql_version}}{{ item }}.rpm state=latest update_cache=yes
    with_items:
      - -libs.x86_64
      - -odbc.x86_64
      - .x86_64
    retries: 3
    delay: 3
    register: s3_download
    until: s3_download is success
    when: postgres_host != "localhost"
    ignore_errors: yes

  # Create file .pgpass
  - name: Create file .pgpass
    template: src=roles/prerequisitos/templates/.pgpass dest={{ item }}.pgpass mode=0600 owner={{ usuario }} group={{ usuario }}
    with_items:
      - "{{ install_prefix }}"
      - /root/
    when: postgres_host != "localhost"
    tags: postinstall

  # Create extension plperl, when the OMniLeads PostgreSQL package is not used
  - name: Create extension plperl
    shell: PGUSER={{ postgres_user }} PGDATABASE={{ postgres_database }} PGHOST={{ postgres_host }} PGPORT={{ postgres_port }} PGPASSWORD={{ postgres_password }} psql -c "CREATE EXTENSION plperl;"
    args:
      executable: /bin/bash
    when: postgres_cloud == "true"
    ignore_errors: yes

  # Check if Virtualenv package {{ virtualenv_version }} is installed
  - name: Check if Virtualenv package {{ virtualenv_version }} is installed
    shell: yum list installed | grep virtualenv | awk '{print $2}' | awk -F "-" '{print $1}'
    register: virtualenv_installed
    changed_when: false
    tags: postinstall

  # Print message if Virtualenv package {{ virtualenv_version }} is not installed yet
  - debug: msg="Virtualenv package {{ virtualenv_version }} is not installed. Proceeding with installation."
    when: virtualenv_installed.stdout != virtualenv_version
    tags: postinstall

  # Print message if Virtualenv package {{ virtualenv_version }} is already installed
  - debug: msg="Virtualenv package is already installed in version {{ virtualenv_version }}. Skipping installation steps."
    when: virtualenv_installed.stdout == virtualenv_version
    tags: postinstall

  # Delete previous Virtualenv package, before installing the latest one
  - name: Delete previous Virtualenv package, before installing the latest one
    command: yum remove -y virtualenv
    tags: postinstall
    when: "virtualenv_installed.stdout != virtualenv_version"

  # Install Virtualenv package {{ virtualenv_version }}
  - name: Install Virtualenv package {{ virtualenv_version }} (from s3 source)
    command: yum install -y {{ virtualenv_package }}
    when: virtualenv_installed.stdout != virtualenv_version
    tags: postinstall
    register: s3_download
    failed_when:
      - "s3_download.rc != 0 or 'scriptlet failure' in s3_download.stderr"

  # Re-install rebrand, if it's the case
  - name: Re-install rebrand, if it's the case
    shell: "{{ install_prefix }}/bin/reinstall_rebrand.sh {{ repo_location }}"
    when: rebrand == "true"
    tags: always
    ignore_errors: yes

  # Reset password for user "admin", if it was requested
  - name: Reset password for user "admin", if it was requested
    shell: sudo -u omnileads bash -c "/opt/omnileads/bin/manage.sh cambiar_admin_password"
    args:
      executable: /bin/bash
    when: reset_admin_password == "true"

  # Download omlutilities repository
  - name: Download omlutilities repository
    ansible.builtin.git:
      repo: '{{ oml_utilities_repo }}'
      dest: /opt/omnileads/utils
      version: main
    when:
      - asterisk_host != "localhost"

  # Set up permissions for {{ install_prefix }} directory
  - name: Set up permissions for {{ install_prefix }} directory
    file: state=directory path={{ install_prefix }} owner={{ usuario }} group={{ usuario }} recurse=yes
    tags: postinstall

  # Tweak configuration for high load scenario (more than 200 active users)
  - name: Tweak configuration for high load scenario - UWSGI parameters
    lineinfile:
      path: /opt/omnileads/run/oml_uwsgi.ini
      state: present
      line: "{{ item }}"
    with_items:
    - 'reload-on-rss = 1024'
    - 'reload-on-as = 2048'
    - 'evil-reload-on-rss = 3096'
    - 'max-requests = 2000'
    when: high_load == "true"

  - name: Tweak configuration for high load scenario - UWSGI parameters
    lineinfile:
      path: /opt/omnileads/run/oml_uwsgi.ini
      regexp: "processes = 30"
      line: "processes = 50"
      state: present
      backup: yes
    when: high_load == "true"

  - name: Tweak configuration for high load scenario - UWSGI parameters
    lineinfile:
      path: /opt/omnileads/run/oml_uwsgi.ini
      regexp: "harakiri = 600"
      line: "harakiri = 3600"
      state: present
      backup: yes
    when: high_load == "true"

  - name: Tweak configuration for high load scenario - UWSGI parameters
    lineinfile:
      path: /opt/omnileads/run/oml_uwsgi.ini
      regexp: "socket-timeout = 600"
      line: "socket-timeout = 3600"
      state: present
      backup: yes
    when: high_load == "true"

  - name: Tweak configuration for high load scenario - UWSGI parameters
    lineinfile:
      path: /opt/omnileads/run/oml_uwsgi.ini
      regexp: "max-worker-lifetime = 10800"
      line: "max-worker-lifetime = 7200"
      state: present
      backup: yes
    when: high_load == "true"

  # Restart OMniLeads service
  - name: Restart OMniLeads service
    systemd: name=omnileads state=restarted enabled=yes daemon_reload=yes
    tags: postinstall

  # Restart OMniLeads Daphne service
  - name: Restart OMniLeads Daphne service
    systemd: name=omnileads-daphne state=restarted enabled=yes daemon_reload=yes
    tags: postinstall
