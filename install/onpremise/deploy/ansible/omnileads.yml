# Copyright (C) 2018 Freetech Solutions

# This file is part of OMniLeads

# This program is free software: You can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see http://www.gnu.org/licenses/.

---
# OMniLeads installation playbook
# It uses the files group_vars/all and inventory, as environment variables
# It uses the file /var/tmp/ansible/ansible.cfg, as configuration file
# Things to take into account:
# https://docs.ansible.com/ansible/2.9/user_guide/playbooks_conditionals.html
# https://docs.ansible.com/ansible/2.9/user_guide/playbooks_loops.html
# https://docs.ansible.com/ansible/2.9/intro_configuration.html
# https://docs.ansible.com/ansible/2.5/user_guide/playbooks_reuse_roles.html

- name: OMniLeads installation
  hosts: prodenv-aio
  gather_facts: True
  roles:
    - prerequisitos

- import_playbook: modules/redis/deploy/redis.yml
  when: redis_host == "localhost"
- import_playbook: modules/postgresql/deploy/postgresql.yml
  when: postgres_host == "localhost"
- import_playbook: modules/rtpengine/deploy/rtpengine.yml
  when: rtpengine_host == "127.0.0.1"
- import_playbook: modules/kamailio/deploy/kamailio.yml
  when: kamailio_host == omni_fqdn
- import_playbook: modules/nginx/deploy/nginx.yml
- import_playbook: modules/websockets/deploy/websockets.yml
  when: websocket_host == "websockets"
- import_playbook: modules/asterisk/deploy/asterisk.yml
  when: asterisk_host == omni_ip

- name: OMniLeads application installation
  hosts: prodenv-aio
  tasks:

  # Install PostgreSQL utilities
  - name: Install PostgreSQL utilities {{ postgresql_version }} (from s3 source)
    command: yum install -y {{ packages_url }}/postgresql/postgresql{{ postgresql_version}}{{ item }}.rpm
    #yum: name={{ packages_url }}/postgresql/postgresql{{ postgresql_version}}{{ item }}.rpm state=latest update_cache=yes
    with_items:
      - -libs.x86_64
      - -odbc.x86_64
      - .x86_64
    retries: 3
    delay: 3
    register: s3_download
    until: s3_download is success
    when: postgres_host != "localhost"
    ignore_errors: yes

  # Create file .pgpass
  - name: Create file .pgpass
    template: src=roles/prerequisitos/templates/.pgpass dest={{ item }}.pgpass mode=0600 owner={{ usuario }} group={{ usuario }}
    with_items:
      - "{{ install_prefix }}"
      - /root/
    when: postgres_host != "localhost"
    tags: postinstall

  # Create extension plperl, when the OMniLeads PostgreSQL package is not used
  - name: Create extension plperl
    shell: PGUSER={{ postgres_user }} PGDATABASE={{ postgres_database }} PGHOST={{ postgres_host }} PGPORT={{ postgres_port }} PGPASSWORD={{ postgres_password }} psql -c "CREATE EXTENSION plperl;"
    args:
      executable: /bin/bash
    when: postgres_cloud == "true"
    ignore_errors: yes

  # Check if Virtualenv package {{ virtualenv_version }} is installed
  - name: Check if Virtualenv package {{ virtualenv_version }} is installed
    shell: yum list installed | grep virtualenv | awk '{print $2}' | awk -F "-" '{print $1}'
    register: virtualenv_installed
    changed_when: false
    tags: postinstall

  # Print message if Virtualenv package {{ virtualenv_version }} is not installed yet
  - debug: msg="Virtualenv package {{ virtualenv_version }} is not installed. Proceeding with installation."
    when: virtualenv_installed.stdout != virtualenv_version
    tags: postinstall

  # Print message if Virtualenv package {{ virtualenv_version }} is already installed
  - debug: msg="Virtualenv package is already installed in version {{ virtualenv_version }}. Skipping installation steps."
    when: virtualenv_installed.stdout == virtualenv_version
    tags: postinstall

  # Solution to issue OML-214: Backup of addons, for re-setting after installation
  - name: Backup of addons, for re-setting after installation
    when: virtualenv_installed.stdout == "210623.01" or virtualenv_installed.stdout == "210714.01" or virtualenv_installed.stdout == "210802.01"
    changed_when: false
    failed_when: false
    shell: >
      if [ -f {{ install_prefix }}/bin/addons_installed.sh ];then
        source {{ install_prefix }}/bin/addons_installed.sh
        for Addon in "${ADDONS_INSTALLED[@]}";do
          cp -r {{ install_prefix }}/addons/${Addon} /tmp
        done
        cp {{ install_prefix }}/bin/addons_installed.sh /tmp
        exit 1
      else
        exit 0
      fi
    register: addons_installed
    tags: postinstall

  # Delete previous Virtualenv package, before installing the latest one
  - name: Delete previous Virtualenv package, before installing the latest one
    command: yum remove -y virtualenv
    tags: postinstall
    when: "virtualenv_installed.stdout != virtualenv_version"

  # Restore media_root in case of IaC deploy
  - name: Restore backup when use infrasctructure as code - 1/4
    vars:
      ansible_python_interpreter: /usr/bin/python3
    aws_s3:
        s3_url: "{{ s3url }}"
        aws_secret_key: "{{ s3_secret_key }}"
        aws_access_key: "{{ s3_access_key }}"
        bucket: "{{ backup_bucket_name }}"
        object: "{{ backup_file_name }}.tar.gz"
        dest: "/var/tmp/{{ backup_file_name }}.tar.gz"
        mode: get
    delegate_to: localhost
    register: backup_s3_download
    when:
      - postgres_host != "localhost"
      - backup_file_name is defined
      - auto_restore == "true"
      - ansible_distribution != "Amazon"

  # Restore media_root in case of IaC deploy
  - name: Restore backup when use infrasctructure as code - 1/4
    vars:
      ansible_python_interpreter: /usr/bin/python3
    aws_s3:
        aws_secret_key: "{{ s3_secret_key }}"
        aws_access_key: "{{ s3_access_key }}"
        bucket: "{{ backup_bucket_name }}"
        object: "{{ backup_file_name }}.tar.gz"
        dest: "/var/tmp/{{ backup_file_name }}.tar.gz"
        mode: get
    delegate_to: localhost
    register: backup_s3_download
    when:
      - postgres_host != "localhost"
      - backup_file_name is defined
      - auto_restore == "true"
      - ansible_distribution == "Amazon"

  - name: Restore backup when use infrasctructure as code - 2/4
    command: tar xzvf /var/tmp/{{ backup_file_name }}.tar.gz -C /var/tmp
    when:
      - postgres_host != "localhost"
      - backup_file_name is defined
      - auto_restore == "true"

  - name: Restore backup when use infrasctructure as code 3/4
    command: tar xzvf /var/tmp/{{ backup_file_name }}/omniapp.tar.gz -C /var/tmp
    when:
      - postgres_host != "localhost"
      - backup_file_name is defined
      - auto_restore == "true"

  - name: Restore backup when use infrasctructure as code 4/4
    command: mv /var/tmp/omniapp/media_root /opt/omnileads/
    when:
      - postgres_host != "localhost"
      - backup_file_name is defined
      - auto_restore == "true"

  # Install Virtualenv package {{ virtualenv_version }}
  - name: Install Virtualenv package {{ virtualenv_version }} (from s3 source)
    command: yum install -y {{ virtualenv_package }}
    when: virtualenv_installed.stdout != virtualenv_version
    tags: postinstall
    register: s3_download
    failed_when:
      - "s3_download.rc != 0 or 'scriptlet failure' in s3_download.stderr"

  - name: Copy backup file to correct dst
    ansible.builtin.copy:
      src: /var/tmp/{{ backup_file_name }}.tar.gz 
      dest: /opt/omnileads/backup
      owner: omnileads
      group: omnileads
      mode: '0644'
    when:
      - postgres_host != "localhost"
      - backup_file_name is defined
      - auto_restore == "true"  

  - name: Restore addons when use infrasctructure as code
    command: bash -x /opt/omnileads/bin/backup-restore.sh --restore={{ backup_file_name }}.tar.gz --omniapp
    when:
      - postgres_host != "localhost"
      - backup_file_name is defined
      - auto_restore == "true"  

  # Solution to issue OML-214: Re-setting backed up addons after installation
  - name: Re-setting addons after installation
    when: addons_installed.rc is defined and addons_installed.rc == 1
    shell: >
      if [ ! -f {{ install_prefix }}/bin/addons_installed.sh ];then
        mv /tmp/addons_installed.sh {{ install_prefix }}/bin
        source {{ install_prefix }}/bin/addons_installed.sh
        for Addon in "${ADDONS_INSTALLED[@]}";do
          mv /tmp/${Addon} {{ install_prefix }}/addons
        done
        {{ install_prefix }}/bin/reinstall_addons.sh
      fi
    tags: postinstall

  # Se reinstalan los archivos de rebrand, si corresponde
  - name: Re-install rebrand
    shell: "{{ install_prefix }}/bin/reinstall_rebrand.sh {{ repo_location }}"
    when: rebrand == "true"
    tags: always

  # Reset password for user "admin", if it was requested
  - name: Reset password for user "admin", if it was requested
    shell: sudo -u omnileads bash -c "/opt/omnileads/bin/manage.sh cambiar_admin_password"
    args:
      executable: /bin/bash
    when: reset_admin_password == "true"

  # Set up permissions for {{ install_prefix }} directory
  - name: Set up permissions for {{ install_prefix }} directory
    file: state=directory path={{ install_prefix }} owner={{ usuario }} group={{ usuario }} recurse=yes
    tags: postinstall

  # Some Tweeks for Hight Load over 200 simultaneus users
  - name: Add high load UWSGI params
    lineinfile:
      path: /opt/omnileads/run/oml_uwsgi.ini
      state: present
      line: "{{ item }}"
    with_items:
    - 'reload-on-rss = 1024'
    - 'reload-on-as = 2048'
    - 'evil-reload-on-rss = 3096'
    - 'max-requests = 2000'
    when: high_load == "true"

  - name: Edit oml_uwsgi.ini High Load params
    lineinfile:
      path: /opt/omnileads/run/oml_uwsgi.ini
      regexp: "processes = 30" 
      line: "processes = 50"
      state: present
      backup: yes
    when: high_load == "true"  

  - name: Edit oml_uwsgi.ini High Load params
    lineinfile:
      path: /opt/omnileads/run/oml_uwsgi.ini
      regexp: "harakiri = 600" 
      line: "harakiri = 3600"
      state: present
      backup: yes      
    when: high_load == "true"

  - name: Edit oml_uwsgi.ini High Load params
    lineinfile:
      path: /opt/omnileads/run/oml_uwsgi.ini
      regexp: "socket-timeout = 600" 
      line: "socket-timeout = 3600"
      state: present
      backup: yes      
    when: high_load == "true"   

  - name: Edit oml_uwsgi.ini High Load params
    lineinfile:
      path: /opt/omnileads/run/oml_uwsgi.ini
      regexp: "max-worker-lifetime = 10800" 
      line: "max-worker-lifetime = 7200"
      state: present
      backup: yes      
    when: high_load == "true"

  # OMniLeads restart
  - name: Restart OMniLeads service
    systemd: name=omnileads state=restarted enabled=yes daemon_reload=yes
    tags: postinstall
