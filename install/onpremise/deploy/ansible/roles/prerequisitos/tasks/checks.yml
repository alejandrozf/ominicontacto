# Copyright (C) 2018 Freetech Solutions

# This file is part of OMniLeads

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.
#
---
########################################################################
# Chequeos de red, de servicios instalados, folders y archivos creados #
########################################################################

# Obtengo IP privada del nodo
- name: Get IP adress of node (selfhosted)
  set_fact: omni_ip={{ hostvars[inventory_hostname]['ansible_' + iface]['ipv4']['address'] }}
  when: iface != "none"
  tags: always

# Comparo si la IP ingresada en el inventory es el mismo  de el nodo
- name: Check if IP in inventory file is configured in the server
  assert:
    that: "'{{ omni_ip }}' in ansible_all_ipv4_addresses"
    msg: "The IP you inserted in inventory file is public, getting the private IP"
  when: iface == "none"
  ignore_errors: true
  register: ip_check
  tags: always

- name: Getting private IP
  shell: ip a | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'
  register: private_ip
  when: iface == "none" and ip_check is failed
  tags: always

- set_fact: "omni_ip={{ private_ip.stdout }}"
  when: iface == "none" and ip_check is failed
  tags: always

# Obtengo hostname del nodo
- name: Get the hostname of node
  command: hostname
  register: hostname
  tags: always
  changed_when: false

# Seteo variable omni_fqdn con hostname obtenido
- name: Set omni_fqdn ansible variable
  set_fact: omni_fqdn="{{ hostname.stdout }}"
  tags: always
  changed_when: false

- name: Setting kamailio_host as machine hostname
  set_fact: kamailio_host="{{ omni_fqdn }}"
  tags: always
  changed_when: false
  when: kamailio_host is not defined

- name: Setting asterisk_host as machine IP
  set_fact: asterisk_host="{{ omni_ip }}"
  tags: always
  changed_when: false
  when: asterisk_host is not defined

- name: Setting postgres_host as localhost
  set_fact: postgres_host=localhost
  tags: always
  changed_when: false
  when: postgres_host is not defined

- name: Setting rtpengine_host as 127.0.0.1
  set_fact: rtpengine_host=127.0.0.1
  tags: always
  changed_when: false
  when: rtpengine_host is not defined

- name: Setting redis as localhost
  set_fact: redis_host=localhost
  tags: always
  changed_when: false
  when: redis_host is not defined

- name: Setting redis_protected variable
  set_fact: redis_protected=true
  tags: always
  changed_when: false
  when: (asterisk_host is not defined or websockets_host is not defined or kamailio_host == omni_fqdn) and redis_host == "localhost"

# Me aseguro que se quiera instalar OML esté dentro de los SO permitidos.
- name: Print omni_distribution
  debug: msg="omni_distribution es {{ ansible_os_family }}"
  changed_when: false
  tags: always

# Si no es asi, esta task generara un error esto es para AIO
- name: Check omni_distribution
  fail: msg="omni_distribution con valor {{ ansible_os_family }} es invalida"
  when: ansible_os_family != "RedHat" and ansible_os_family != "Sangoma" and prodenv == 1
  changed_when: false
  tags: always

######################################################################################################
# Chequeo de variables de entorno:                                                                   #
# Se hace para que no sea necesario volver a ingresar las variables en el inventory al hacer upgrade #
# Las tasks que no estan comentadas siguen este patrón                                               #
# 1. # Chequeo si existe $ENVAR, equivale al parametro del inventory                                 #
# 2. Si el comando anterior retornó 0, se setea parametro de inventory con el valor de $ENVAR        #
# 3. Si el comando anterior retorna 1, no hace nada                                                  #
# 4. Si alguna $ENVAR no está declarada y no se seteó el parametro del inventory quiere decir que    #
# el usuario olvidó agregar algún parametro y deveolverá un mensaje de error diciendole que variable #
#  faltó                                                                                             #
######################################################################################################

- name: Check if $TZ was defined previously
  shell: bash -lc 'if [ -z $TZ ]; then exit 1; else echo $TZ; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_tz
  tags: always

- set_fact: TZ="{{ assert_tz.stdout }}"
  when: assert_tz.rc == 0 and TZ is not defined
  tags: always

- name: Check if $PGUSER was defined previously
  shell: bash -lc 'if [ -z $PGUSER ]; then exit 1; else echo $PGUSER; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_pguser
  tags: always

- set_fact: postgres_user="{{ assert_pguser.stdout }}"
  when: assert_pguser.rc == 0 and postgres_user is not defined
  tags: always

- name: Check if $PGPASSWORD was defined previously
  shell: bash -lc 'if [ -z $PGPASSWORD ]; then exit 1; else echo $PGPASSWORD; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_pgpass
  tags: always

- set_fact: postgres_password="{{ assert_pgpass.stdout }}"
  when: assert_pgpass.rc == 0 and postgres_password is not defined
  tags: always

- name: Check if $PGPORT was defined previously
  shell: bash -lc 'if [ -z $PGPORT ]; then exit 1; else echo $PGPORT; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_pgport
  tags: always

- name: Setting postgres_port ansible variable
  set_fact: postgres_port="{{ assert_pgport.stdout }}"
  when: assert_pgport.rc == 0 and postgres_port is not defined
  tags: always

- set_fact: postgres_port=5432
  when: assert_pgport.rc == 1 and postgres_port is not defined
  tags: always

- name: Check if $AMI_USER was defined previously
  shell: bash -lc 'if [ -z $AMI_USER ]; then exit 1; else echo $AMI_USER; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_amiuser
  tags: always

- set_fact: ami_user="{{ assert_amiuser.stdout }}"
  when: assert_amiuser.rc == 0 and ami_user is not defined
  tags: always

- name: Check if $AMI_PASSWORD was defined previously
  shell: bash -lc 'if [ -z $AMI_PASSWORD ]; then exit 1; else echo $AMI_PASSWORD; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_amipass
  tags: always

- set_fact: ami_password="{{ assert_amipass.stdout }}"
  when: assert_amipass.rc == 0 and ami_password is not defined
  tags: always

- name: Check if $WEBSOCKET_HOST was defined previously
  shell: bash -lc 'if [ -z $WEBSOCKET_HOST ]; then exit 1; else echo $WEBSOCKET_HOST; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_websockethost
  tags: always

- set_fact: websocket_host="{{ assert_websockethost.stdout }}"
  when: assert_websockethost.rc == 0 and websocket_host == "websockets"
  tags: always

- name: Check if $WEBSOCKET_PORT was defined previously
  shell: bash -lc 'if [ -z $WEBSOCKET_PORT ]; then exit 1; else echo $WEBSOCKET_PORT; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_websocketport
  tags: always

- set_fact: websocket_port="{{ assert_websocketport.stdout }}"
  when: assert_websocketport.rc == 0 and websocket_port == 8000
  tags: always

- name: Check if $WOMBAT_USER was defined previously
  shell: bash -lc 'if [ -z $WOMBAT_USER ]; then exit 1; else echo $WOMBAT_USER; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_wombatuser
  tags: always

- set_fact: dialer_user="{{ assert_wombatuser.stdout }}"
  when: assert_wombatuser.rc == 0 and dialer_user is not defined
  tags: always

- name: Check if $WOMBAT_PASSWORD was defined previously
  shell: bash -lc 'if [ -z $WOMBAT_PASSWORD ]; then exit 1; else echo $WOMBAT_PASSWORD; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_wombatpass
  tags: always

- set_fact: dialer_password="{{ assert_wombatpass.stdout }}"
  when: assert_wombatpass.rc == 0 and dialer_password is not defined
  tags: always

- name: Check if $SESSION_COOKIE_AGE was defined previously
  shell: bash -lc 'if [ -z $SESSION_COOKIE_AGE ]; then exit 1; else echo $SESSION_COOKIE_AGE; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_sca
  tags: always

- set_fact: SCA="{{ assert_sca.stdout }}"
  when: assert_sca.rc == 0 and SCA == 3600
  tags: always

- name: Check if $SHM_SIZE was defined previously
  shell: bash -lc 'if [ -z $SHM_SIZE ]; then exit 1; else echo $SHM_SIZE; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_shm_size
  tags: always

- set_fact: shm_size="{{ assert_shm_size.stdout }}"
  when: assert_shm_size.rc == 0 and shm_size == 64
  tags: always

- name: Check if $PKG_SIZE was defined previously
  shell: bash -lc 'if [ -z $PKG_SIZE ]; then exit 1; else echo $PKG_SIZE; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_pkg_size
  tags: always

- set_fact: pkg_size="{{ assert_pkg_size.stdout }}"
  when: assert_pkg_size.rc == 0 and pkg_size == 8
  tags: always

- name: Check if $EPHEMERAL_USER_TTL was defined previously
  shell: bash -lc 'if [ -z $EPHEMERAL_USER_TTL ]; then exit 1; else echo $EPHEMERAL_USER_TTL; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_ecctl
  tags: always

- set_fact: ECCTL="{{ assert_ecctl.stdout }}"
  when: assert_ecctl.rc == 0 and ECCTL == 28800
  tags: always

- name: Check if $MONITORFORMAT was defined previously
  shell: bash -lc 'if [ -z $MONITORFORMAT ]; then exit 1; else echo $MONITORFORMAT; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_monitorformat
  tags: always

- set_fact: MONITORFORMAT="{{ assert_monitorformat.stdout }}"
  when: assert_monitorformat.rc == 0 and MONITORFORMAT is not defined
  tags: always

- name: Check if $EXTERN_IP was defined previously
  shell: bash -lc 'if [ -z $EXTERN_IP ]; then exit 1; else echo $EXTERN_IP; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_externip
  tags: always

- set_fact: extern_ip="{{ assert_externip.stdout }}"
  when: assert_externip.rc == 0 and extern_ip is not defined
  tags: always

# Chequea si timezone esta definido
- name: Check if extern_ip variable is defined
  fail:
    msg: extern_ip undefined, edit extern_ip in inventory file
  when: extern_ip is not defined and assert_externip.rc == 1
  tags: always

- name: Check if TimeZone variable is defined
  fail:
    msg: TimeZone variable undefined, edit TZ variable in inventory file
  when: TZ is not defined and assert_tz.rc == 1
  tags: always

- name: Check if postgres user variable is defined
  fail:
    msg: Postgres user undefined, edit postgres_user in inventory file
  when: postgres_user is not defined and assert_pguser.rc == 1
  tags: always

- name: Check if postgres password variable is defined
  fail:
    msg: Postgres password undefined, edit postgres_password in inventory file
  when: postgres_password is not defined and assert_pgpass.rc == 1
  tags: always

- name: Check if AMI user variable is defined
  fail:
    msg: AMI user undefined, edit ami_user in inventory file
  when: ami_user is not defined and assert_amiuser.rc == 1
  tags: always

- name: Check if AMI password variable is defined
  fail:
    msg: AMI password undefined, edit ami_password in inventory file
  when: ami_password is not defined and assert_amipass.rc == 1
  tags: always

- name: Check if WD user variable is defined
  fail:
    msg: WD user undefined, edit dialer_user in inventory file
  when: dialer_user is not defined and assert_dialeruser.rc == 1
  tags: always

- name: Check if WD pass variable is defined
  fail:
    msg: WD pass undefined, edit dialer_password in inventory file
  when: dialer_password is not defined and assert_dialerpass.rc == 1
  tags: always

# Obtengo IP publica del nodo
- name: Get public IP address of node
  shell: curl http://ipinfo.io/ip
  register: publicip
  when: extern_ip == "none" or extern_ip == "auto"
  tags: always

# Valido si lo que devolvió la tarea anterior es una IP
- name: Validate IP public obtained
  shell: if [[ {{ publicip.stdout }} =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then echo 0; else echo 1; fi
  args:
    executable: /bin/bash
  register: ip_val
  failed_when: false
  when: extern_ip == "none" or extern_ip == "auto"
  tags: always

# Si no es una IP tiro este mensaje de error
- fail:
    msg: "The public IP obtained is wrong, check in shell if you obtain a public IP with this command 'curl http://ipinfo.io/ip', after that please run the script again"
  when: ip_val is not skipped and ip_val.stdout != '0'
  tags: always

- set_fact: public_ip="{{ publicip.stdout }}"
  when: extern_ip == "none" or extern_ip == "auto"
  tags: always
