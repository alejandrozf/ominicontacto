version: '3.7'
services:
  acd:
    container_name: omlacd
    depends_on:
      - postgresql
      - redis
      - websockets
    dns: 8.8.8.8
    environment:
        - ASTERISK_LOCATION=${ASTERISK_LOCATION}
        - AMI_USER=${AMI_USER}
        - AMI_PASSWORD=${AMI_PASSWORD}
        - OMNILEADS_HOSTNAME=${OMNILEADS_HOSTNAME}
        - REDIS_HOSTNAME=${REDIS_HOSTNAME}
        - PGHOST=${PGHOST}
        - PGPORT=${PGPORT}
        - PGUSER=${PGUSER}
        - PGDATABASE=${PGDATABASE}
        - PGPASSWORD=${PGPASSWORD}
        - MONITORFORMAT=${MONITORFORMAT}
        - CALLREC_DEVICE=${CALLREC_DEVICE}
        - S3_STORAGE_ENABLED=${S3_STORAGE_ENABLED}
        - S3_BUCKET_NAME=${S3_BUCKET_NAME}
        - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        - S3_ENDPOINT=${S3_ENDPOINT_MINIO}
        - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    image: ${OMLACD_IMG}
    networks:
      - devenv
    ports:
      - 5060:5161/udp
    privileged: true
    restart: on-failure
    stop_grace_period: 1m30s
    volumes:
#      - ../../../../omlacd/grabaciones:/var/spool/asterisk/monitor/
      - ../../../../omlacd/source/astconf:/etc/asterisk/
      - ../../../../omlacd/source/agis:/var/lib/asterisk/agi-bin/
      - ../../../../omlacd/source/scripts:/opt/omnileads/asterisk/virtualenv/scripts
    working_dir: /etc/asterisk

  app-builder:
    container_name: omlappbuilder
    dns: 8.8.8.8
    image: ${OMLAPPBUILDER_IMG}
    networks:
      - devenv
    privileged: true
    restart: on-failure
    stdin_open: true
    stop_grace_period: 1m30s
    tty: true
    volumes:
      - requirements:/usr/local/lib/python3.7/
      - pyst2:/root/requirements/src
      - ../../../requirements:/root/requirements
    working_dir: /root/requirements

  app:
    container_name: omlapp
    depends_on:
      - postgresql
      - redis
      - acd
    dns: 8.8.8.8
    env_file: 
      - .env
    image: ${OMLAPP_IMG}
    networks:
      - devenv
    privileged: true
    restart: on-failure
    stdin_open: true
    stop_grace_period: 1m30s
    tty: true
    volumes:
      - requirements:/usr/local/lib/python3.7/
      - pyst2:/src/pyst2/
      - ./media_root:/opt/omnileads/media_root
      - ../../../:/opt/omnileads/ominicontacto/
    working_dir: /opt/omnileads/ominicontacto

  kamailio:
    command:
      - /bin/bash
    container_name: omlkamailio
    depends_on:
      - redis
      - acd
      - rtpengine
    dns: 8.8.8.8
    environment:
      - AUTHEPH_SK=${AUTHEPH_SK}
      - ASTERISK_HOSTNAME=${ASTERISK_HOSTNAME}
      - KAMAILIO_HOSTNAME=${KAMAILIO_HOSTNAME}
      - REDIS_HOSTNAME=${REDIS_HOSTNAME}
      - RTPENGINE_HOSTNAME=${RTPENGINE_HOSTNAME}
      - TZ=${TZ}
      - SHM_SIZE=${SHM_SIZE}
      - PKG_SIZE=${PKG_SIZE}
      - KAMAILIO_CERTS_LOCATION=${KAMAILIO_CERTS_LOCATION}
    image: ${OMLKAM_IMG}
    networks:
      - devenv
    privileged: true
    restart: on-failure
    stop_grace_period: 1m30s
    volumes:
      - ../../../../omlkamailio/source/conf:/etc/kamailio/

  wombat:
    command: >
      bash -c "sed -i '/JDBC_URL/c\JDBC_URL=jdbc:mariadb:\/\/${MYSQL_HOST}\/${WOMBAT_DB}?user=${WOMBAT_DB_USER}&password=${WOMBAT_DB_PASS}&autoReconnect=true' /usr/local/tomcat/webapps/wombat/WEB-INF/tpf.properties && catalina.sh run"
    container_name: omldialer
    depends_on:
      - mariadb
      - acd
    dns: 8.8.8.8
    environment:
      - TZ=${TZ}
      - MYSQL_PWD=${MYSQL_ROOT_PASS}
    image: ${WOMBAT_IMG}
    networks:
      - devenv
    ports:
      - ${WD_EXT_PORT}:8080/tcp
    privileged: true
    restart: on-failure
    stop_grace_period: 1m30s

  mariadb:
    container_name: omlmariadb
    dns: 8.8.8.8
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - TZ=${TZ}
      - MARIADB_ROOT_PASSWORD=${MYSQL_ROOT_PASS}
      - MARIADB_DATABASE=${WOMBAT_DB}
      - MARIADB_USER=${WOMBAT_DB_USER}
      - MARIADB_PASSWORD=${WOMBAT_DB_PASS}
    image: ${MARIADB_IMG}
    networks:
      - devenv
    privileged: true
    restart: on-failure
    stop_grace_period: 1m30s
    volumes:
      - mariadb_data:/bitnami

  postgresql:
    container_name: omlpostgresql
    dns: 8.8.8.8
    environment:
      - TZ=${TZ}
      - POSTGRES_USER=${PGUSER}
      - POSTGRES_PASSWORD=${PGPASSWORD}
      - POSTGRES_DB=${PGDATABASE}
    image: ${OMLPGSQL_IMG}
    networks:
      - devenv
    ports:
      - ${PG_EXT_PORT}:5432/tcp
    privileged: true
    restart: on-failure
    stop_grace_period: 1m30s
    volumes:
      - postgresql_data:/var/lib/postgresql/data

  pbxemulator:
    container_name: omlpbxemulator
    hostname: pbxemulator
    dns: 8.8.8.8
    environment:
      - TZ=${TZ}
    image: ${OMLPSTNEMULATOR_IMG}
    networks:
      - devenv
    ports:
      - 6060:6060/udp
      - 10000-10020:10000-10020/udp
    privileged: true
    restart: on-failure
    stdin_open: true
    stop_grace_period: 1m30s
    tty: true

  rtpengine:
    container_name: omlrtpengine
    dns: 8.8.8.8
    environment:
      - TZ=${TZ}
    image: ${OMLRTPENGINE_IMG}
    networks:
      - devenv
    privileged: true
    restart: on-failure
    stop_grace_period: 1m30s

  vue-cli:
    tty: true
    container_name: omlvuejscli
    image: ${OMLVUEJS_IMG}
    ports:
      - ${NODEJS_EXT_PORT}:8081
    networks:
      - devenv
    volumes:
      - ../../../omnileads_ui/:/home/app/
      - ../../../survey_app/:/home/survey/
      - ../../../wallboard_app/:/home/wallboard/
      
  minio:
    tty: true
    container_name: omls3
    image: ${OMLMINIO_IMG}
    command: server --console-address "localhost:9001" /data
    environment:
      - MINIO_ROOT_USER=${S3_HTTP_ADMIN_USER}
      - MINIO_ROOT_PASSWORD=${S3_HTTP_ADMIN_PASS}
      - MINIO_SERVER_URL=${S3_ENDPOINT}
    networks:
      - devenv
    ports:
      - 9001:9001   
      - 9000:9000   
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  nginx:
    container_name: omlnginx
    depends_on:
      - app
      - kamailio
      - websockets
    dns: 8.8.8.8
    environment:
      - TZ=${TZ}
      - ENV=devenv
      - INFRA=docker
      - APP=app
    image: ${OMLNGINX_IMG}
    networks:
      - devenv
    privileged: true
    restart: on-failure
    stop_grace_period: 1m30s
    volumes:
      - ../../../../omlnginx/source/conf:/etc/nginx/
#      - ../../../../omlacd/grabaciones:/var/spool/asterisk/monitor

################################ High Availability ##################################
################################ High Availability ##################################

  app02:
    container_name: omlapp_node_02
    depends_on:
      - postgresql
      - selenium
    dns: 8.8.8.8
    env_file:
      - .env
    image: ${OMLAPP_IMG}
    networks:
      - devenv
    privileged: true
    restart: on-failure
    stdin_open: true
    stop_grace_period: 1m30s
    tty: true
    volumes:
      - requirements:/usr/local/lib/python3.7/
      - pyst2:/src/pyst2/
      - ../../../:/opt/omnileads/ominicontacto/
    working_dir: /opt/omnileads/ominicontacto  

  nginx02:
    container_name: omlnginx_node_02
    depends_on:
      - app02
      - kamailio
      - websockets
    dns: 8.8.8.8
    environment:
      - TZ=${TZ}
      - ENV=devenv
      - INFRA=docker
      - APP=app02
    image: ${OMLNGINX_IMG}
    networks:
      - devenv
    privileged: true
    restart: on-failure
    stop_grace_period: 1m30s
    volumes:
      - ../../../../omlnginx/source/conf:/etc/nginx/

  redis_lb:
    container_name: omlhaproxy_redis
    depends_on:
      - redis
      - redis_rep_01
      - redis_rep_02
      - app
    dns: 8.8.8.8
    image: ${OMLHAPROXY_REDIS_IMG}
    environment:
      - TZ=${TZ}
    networks:
      - devenv
    ports:
      - 16379:6379   
    privileged: true
    restart: on-failure
    stop_grace_period: 1m30s
    volumes:
     - ../../../../omlhaproxy/build/redis_lb:/usr/local/etc/haproxy/

  app_lb:
    container_name: omlhaproxy_app
    depends_on:
      - nginx
      - nginx02
    dns: 8.8.8.8
    image: ${OMLHAPROXY_APP_IMG}
    environment:
      - TZ=${TZ}
    networks:
      - devenv
    ports:
      - ${NGINX_EXT_PORT}:443     
    privileged: true
    restart: on-failure
    stop_grace_period: 1m30s
    volumes:
    - ../../../../omlhaproxy/build/nginx_lb:/usr/local/etc/haproxy/

  redis:
    container_name: omlredis
    dns: 8.8.8.8
    environment:
      - TZ=${TZ}
      - ROLE=main
    networks:
      - devenv
    image: ${OMLREDISGEARS_IMG}
    privileged: true
    restart: on-failure
    stop_grace_period: 1m30s
    volumes:
      - redis_data:/data

  redis_rep_01:
    container_name: omlredis_rep_01
    depends_on:
      - redis
    dns: 8.8.8.8
    environment:
      - TZ=${TZ}
    networks:
      - devenv
    image: ${OMLREDISGEARS_IMG}
    command: redis-server --loadmodule /var/opt/redislabs/lib/modules/redisgears.so --slaveof redis 6379
    privileged: true
    restart: on-failure
    stop_grace_period: 1m30s  
    volumes:
      - redis_data_01:/data
  
  redis_rep_02:
    container_name: omlredis_rep_02
    depends_on:
      - redis
      - redis_rep_01
    dns: 8.8.8.8
    environment:
      - TZ=${TZ}
    networks:
      - devenv
    image: ${OMLREDISGEARS_IMG}
    command: redis-server --loadmodule /var/opt/redislabs/lib/modules/redisgears.so --slaveof redis 6379
    privileged: true
    restart: on-failure
    stop_grace_period: 1m30s
    volumes:
      - redis_data_02:/data

  sentinel_01:
    image: ${OMLSENTINEL_IMG}
    environment:
      - REDIS_MASTER_HOST=redis
      - REDIS_SENTINEL_QUORUM=3
      - REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS=30000
      - REDIS_SENTINEL_RESOLVE_HOSTNAMES=yes
      - REDIS_MASTER_SET=master
    container_name: omlsentinel_01
    depends_on:
      - redis
      - redis_rep_01
      - redis_rep_02
    dns: 8.8.8.8
    networks:
      - devenv
    privileged: true
    restart: on-failure
    stop_grace_period: 1m30s

  sentinel_02:
    image: ${OMLSENTINEL_IMG}
    environment:
      - REDIS_MASTER_HOST=redis
      - REDIS_SENTINEL_QUORUM=3
      - REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS=30000
      - REDIS_SENTINEL_RESOLVE_HOSTNAMES=yes
      - REDIS_MASTER_SET=master
    container_name: omlsentinel_02
    depends_on:
      - redis
      - redis_rep_01
      - redis_rep_02
    dns: 8.8.8.8
    networks:
      - devenv
    privileged: true
    restart: on-failure
    stop_grace_period: 1m30s

  sentinel_03:
    image: ${OMLSENTINEL_IMG}
    environment:
      - REDIS_MASTER_HOST=redis
      - REDIS_SENTINEL_QUORUM=3
      - REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS=30000
      - REDIS_SENTINEL_RESOLVE_HOSTNAMES=yes
      - REDIS_MASTER_SET=master
    container_name: omlsentinel_03
    depends_on:
      - redis
      - redis_rep_01
      - redis_rep_02
    dns: 8.8.8.8
    networks:
      - devenv
    privileged: true
    restart: on-failure
    stop_grace_period: 1m30s

  websockets:
    tty: true
    container_name: omlwebsockets
    image: ${OMLWS_IMG}
    depends_on:
      - sentinel_01
      - sentinel_02
      - sentinel_03
    environment:
      - BIND_ADDRESS=0.0.0.0:8000
      - EVENT_LOOP=uvloop
      - LOGGERS=DEBUG:fts.oml.services.websockets,websockets.server
      - REDIS_HOST=redis+sentinel://master/sentinel_01,sentinel_02,sentinel_03
    ports:
      - "${WEBSOCKET_EXT_PORT}:8000"
    networks:
      - devenv
    volumes:
      - ../../../../omlwebsockets/source/:/opt/services/webapp/src/
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health-checks"]
      interval: 30s
      timeout: 10s
      retries: 6

networks:
  devenv:
    ipam:
      driver: default
      config:
        - subnet: "${SUBNET}"

volumes:
  mariadb_data:
  postgresql_data:
  redis_data:
  redis_data_01:
  redis_data_02:
  requirements:
  pyst2:
  minio_data:
