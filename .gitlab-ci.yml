# Copyright (C) 2018 Freetech Solutions

# This file is part of OMniLeads

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.
#
# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python
stages:
  - test
  - build
  - deploy

test:
  stage: test
  image: freetechsolutions/python-flake8:3.6
  # Pick zero or more services to be used on all builds.
  # Only needed when using a docker container to run your tests in.
  # Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
  services:
    - name: freetechsolutions/postgresql:11
      alias: plpython
    - redis
  # This folder is cached between builds
  # http://docs.gitlab.com/ce/ci/yaml/README.html#cache
  cache:
    paths:
      - /root/.cache/pip/
  before_script:
    - mkdir -p /opt/omnileads/ominicontacto/
    - touch /opt/omnileads/ominicontacto/django.log
    - mkdir -p /opt/omnileads/static
    - mkdir -p /opt/omnileads/media_root
    - pip install -r requirements/requirements.txt
  variables:
    POSTGRES_DB: omnileads
    POSTGRES_USER: omnileads
    POSTGRES_PASSWORD: omnileadsrw
    DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/$POSTGRES_DB"
    DJANGO_SETTINGS_MODULE: "ominicontacto.settings.gitlab"
  script:
    - python checks.py
    - bash check-js.sh
    - flake8
    - python manage.py test --failfast
    - python manage.py compilemessages
  only:
    - merge_requests
    - schedules
    - web

build-docker-devenv:
  stage: build
  script:
    - bash /home/ftsinfra/git_cleanup.sh
    - cd /home/ftsinfra/ominicontacto/build/vagrant
    - python edit_inventory.py --docker_build=yes -dle=$DOCKER_LOGIN_EMAIL -dlp=$DOCKER_LOGIN_PASSWORD
    - cd /home/ftsinfra/ominicontacto/build/ansible
    - echo "$FTSINFRA_PASS" | sudo -S ./build.sh --docker-de-build
  tags:
    - build-docker
  only:
    - /.*build-all.*$/
    - /.*build-docker.*$/
    - schedules
    - web

build-docker-prodenv:
  stage: build
  script:
    - bash /home/ftsinfra/git_cleanup.sh
    - cd /home/ftsinfra/ominicontacto/build/vagrant
    - python edit_inventory.py --docker_build=yes -dle=$DOCKER_LOGIN_EMAIL -dlp=$DOCKER_LOGIN_PASSWORD
    - cd /home/ftsinfra/ominicontacto/build/ansible
    - echo "$FTSINFRA_PASS" | sudo -S ./build.sh --docker-pe-build --docker-tag=$CI_COMMIT_REF_NAME
  tags:
    - build-docker
  only:
    - /.*build-all.*$/
    - /.*build-docker.*$/
    - schedules
    - web

build-aio:
  stage: build
  script:
    - export BRANCH=$CI_COMMIT_REF_NAME
    - bash /home/ftsinfra/git_cleanup.sh
    - cd /home/ftsinfra/ominicontacto/build/vagrant && ./vagrantsh.sh
    - vagrant up --provision
    - ./utils.sh
    - vagrant halt
  tags:
    - build-aio
  only:
    - /.*build-all.*$/
    - /.*build-aio.*$/
    - schedules
    - web

deploy-aio-host-node:
  stage: deploy
  environment: FTS-CENTOS7
  script:
  #  - export CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME STAGING_IP_CENTOS=$STAGING_IP_CENTOS
    - bash /home/ftsinfra/git_cleanup.sh
    - cd /home/ftsinfra/ominicontacto/deploy/vagrant/host_node/
    - vagrant halt centos
    - vagrant destroy centos -f
    - ./vagrantup.sh centos
    - python ../edit_inventory.py --internal_ip=$STAGING_IP_CENTOS --host_node=yes
    - cd ../../ansible
    - echo "$FTSINFRA_PASS" | sudo -S IS_CICD=$IS_CICD ./deploy.sh -i
    - TESTS_INTEGRACION=True TESTS_INTEGRACION_HOSTNAME=$STAGING_HOST_CENTOS ADMIN_USERNAME=admin ADMIN_PASSWORD=$DJANGO_PASS LOGIN_FAILURE_LIMIT=$LOGIN_FAILURE_LIMIT python /home/ftsinfra/ominicontacto/ominicontacto_app/tests/tests.py
    - /home/ftsinfra/ominicontacto/deploy/vagrant/releases/package.sh
    - cd /home/ftsinfra/ominicontacto/deploy/vagrant/host_node/
    - vagrant halt centos
  tags:
    - deploy-aio
  only:
    - /.*test-de-integraci√≥n.*$/
    - /.*deploy.*$/
    - schedules
    - web

deploy-aio-self-hosted:
  stage: deploy
  script:
    - export BRANCH=$CI_COMMIT_REF_NAME CENTOS_IP=$STAGING_IP_CENTOS
    - bash /home/ftsinfra/git_cleanup.sh
    - cd /home/ftsinfra/ominicontacto/deploy/vagrant/self_hosted/
    - vagrant halt; RC=0
    - vagrant destroy -f; RC=0
    - ./vagrantsh.sh
    - vagrant up --provision
    - vagrant halt
    - vagrant destroy -f
  tags:
    - deploy-aio
  only:
    - /.*deploy.*$/
    - schedules
    - web

upgrade-aio:
  stage: deploy
  script:
    - export CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME RELEASE_TO_UPGRADE=$RELEASE_TO_UPGRADE
    - bash /home/ftsinfra/git_cleanup.sh
    - cd /home/ftsinfra/oml-boxes
    - vagrant box add centos-release-$RELEASE_TO_UPGRADE.box --name centos-release-$RELEASE_TO_UPGRADE --force
    - cd /home/ftsinfra/ominicontacto/deploy/vagrant/releases
    - vagrant halt
    - vagrant destroy -f
    - ./vagrantup.sh centos
    - python ../edit_inventory.py --internal_ip=172.16.20.63 --host_node=yes
    - cd ../../ansible
    - echo "$FTSINFRA_PASS" | sudo -S IS_CICD=$IS_CICD ./deploy.sh -u
    - cd /home/ftsinfra/ominicontacto/deploy/vagrant/releases
    - vagrant halt centos
  tags:
    - deploy-aio
  only:
    - web

deploy-docker-prodenv:
  stage: deploy
  script:
    - bash /home/ftsinfra/git_cleanup.sh
    - cd /home/ftsinfra/ominicontacto/deploy/vagrant/host_node/
    - vagrant halt centos
    - vagrant destroy centos -f
    - ./vagrantup.sh centos
    - python ../edit_inventory.py --internal_ip=$STAGING_IP_CENTOS --docker_deploy=yes --prodenv=yes
    - cd ../../ansible
    - echo "$FTSINFRA_PASS" | sudo -S IS_CICD=$IS_CICD ./deploy.sh --docker-deploy
    - cd /home/ftsinfra/ominicontacto/deploy/vagrant/host_node/
    - vagrant halt centos
  tags:
    - deploy-docker
  only:
    - /.*deploy.*$/
    - schedules
    - web

deploy-docker-devenv:
  stage: deploy
  script:
    - bash /home/ftsinfra/git_cleanup.sh
    - cd /home/ftsinfra/ominicontacto/deploy/vagrant
    - python edit_inventory.py --docker_deploy=yes --devenv=yes
    - cd ../ansible
    - echo "$FTSINFRA_PASS" | sudo -S IS_CICD=$IS_CICD ./deploy.sh --docker-deploy --iface=enp2s0
  tags:
    - deploy-docker
  only:
    - /.*deploy.*$/
    - schedules
    - web
