; Copyright (C) 2018 Freetech Solutions

; This file is part of OMniLeads

; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.

; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.

; You should have received a copy of the GNU General Public License
; along with this program.  If not, see http://www.gnu.org/licenses/.

; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML         MODULES SUBRUTINES      OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML         MODULES SUBRUTINES      OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML         MODULES SUBRUTINES      OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML

[sub-oml-module-ivr]
; subrutina que implementa modulo de IVR

include => sub-oml-module-ivr-custom

exten => s,1,Verbose(2, IVR module affect this channel: ${CHANNEL]})
same => n,Set(OMLIVRID=${ARG1})

same => n,Gosub(sub-oml-set-chanvars,s,1(${OMLIVRID},IVR))

same => n,Set(OMLTOCOUNT=1)
same => n,Set(OMLINVCOUNT=1)
same => n,Set(XCOUNT=1)

same => n(audio),Read(OMLIVRDTMF,${OMLIVRAUDIO},1,,1,${OMLIVRTIMEOUT})
same => n,GotoIf($[${ISNULL(${OMLIVRDTMF})}]?nullDTMF)

same => n(while),Set(COUNTER=1)
same => n,While($[${COUNTER} <= ${OMLIVROPTIONS}])
same => n,GotoIf($["${OMLIVRDTMF}" == "${OMLIVROPTIONDTMF-${COUNTER}}"]?correctOpt)
same => n,Set(COUNTER=${INC(COUNTER)})
same => n,EndWhile()

same => n,Verbose(2, DTMF invalido para este IVR) ; retry & contador de fallos
same => n,GotoIf($[${ISNULL(${OMLIVRINVRETRY})}]?invalidDst)
same => n,Gosub(sub-oml-countdown,s,1(${XCOUNT},${OMLIVRINVRETRY}))
same => n,ExecIf($["${OMLIVRINVAUDIO}"!="NONE"]?Playback(${OMLIVRINVAUDIO}))
same => n,GotoIf($["${GOSUB_RETVAL}" == "0"]?invalidDst
same => n,Goto(audio)

same => n(invalidDst),Gosub(sub-oml-dst-switch,s,1(${OMLIVRDEFAULTINVDST}))
same => n,Gosub(sub-oml-hangup,s,1(FAIL-IVR))

same => n(nullDTMF),Verbose(2, DTMF nulo para este IVR)
same => n,GotoIf($[${ISNULL(${OMLIVRTORETRY})}]?timeOutDst)
same => n,Gosub(sub-oml-countdown,s,1(${XCOUNT},${OMLIVRTORETRY}))
same => n,ExecIf($["${OMLIVRTOAUDIO}"!="NONE"]?Playback(${OMLIVRTOAUDIO}))
same => n,GotoIf($["${GOSUB_RETVAL}" == "0"]?timeOutDst)
same => n,Goto(audio)

same => n(timeOutDst),Gosub(sub-oml-dst-switch,s,1(${OMLIVRDEFAULTTODST}))
same => n,Gosub(sub-oml-hangup,s,1(FAIL-IVR))

same => n(correctOpt),Set(OMLOBJDST=${OMLIVROPTIONDST-${COUNTER}})
same => n,Gosub(sub-oml-dst-switch,s,1(${OMLOBJDST}))
same => n,Gosub(sub-oml-hangup,s,1(FAIL-IVR))


[sub-oml-module-time-groups]
include => sub-oml-module-time-groups-custom

exten => s,1,Verbose(2, Time Group module affect this channel: ${CHANNEL]})

same => n,Gosub(sub-oml-set-chanvars,s,1(${ARG1},TG))

; inicio While  inicio While  inicio While  inicio While  inicio While  inicio While
same => n(while),Set(OMLTGCOUNTER=1)
same => n,While($[${OMLTGCOUNTER} <= ${OMLTGENTRIES}])

same => n,Set(OMLTGHOURF=${OMLTGENTRYHOURF-${OMLTGCOUNTER}})
same => n,Set(OMLTGHOURT=${OMLTGENTRYHOURT-${OMLTGCOUNTER}})
same => n,Set(OMLTGDAYF=${OMLTGENTRYDAYF-${OMLTGCOUNTER}})
same => n,Set(OMLTGDAYT=${OMLTGENTRYDAYT-${OMLTGCOUNTER}})
same => n,Set(OMLTGDAYNUMF=${OMLTGENTRYDAYNUMF-${OMLTGCOUNTER}})
same => n,Set(OMLTGDAYNUMT=${OMLTGENTRYDAYNUMT-${OMLTGCOUNTER}})
same => n,Set(OMLTGMONTHF=${OMLTGENTRYMONTHF-${OMLTGCOUNTER}})
same => n,Set(OMLTGMONTHT=${OMLTGENTRYMONTHT-${OMLTGCOUNTER}})

same => n,Set(OMLTGHOURRANGE=${OMLTGHOURF}-${OMLTGHOURT})
same => n,GotoIf($["${OMLTGHOURF}" == "${OMLTGHOURT}"]?setHourRange)

; check si el rango esta compuesto por el mismo valor
same => n(dayRangeSet),Set(OMLTGDAYRANGE=${OMLTGDAYF}-${OMLTGDAYT})
same => n,GotoIf($["${OMLTGDAYF}" == "${OMLTGDAYT}"]?setDayRange)

same => n(dayNumRangeSet),Set(OMLTGDAYNUMRANGE=${OMLTGDAYNUMF}-${OMLTGDAYNUMT})
same => n,GotoIf($["${OMLTGDAYNUMF}" == "${OMLTGDAYNUMT}"]?setDayNumRange)

same => n(monthRangeSet),Set(OMLTGMONTHRANGE=${OMLTGMONTHF}-${OMLTGMONTHT})
same => n,GotoIf($["${OMLTGMONTHF}" == "${OMLTGMONTHT}"]?setMonthRange)

same => n(checkTime),GotoIfTime(${OMLTGHOURRANGE},${OMLTGDAYRANGE},${OMLTGDAYNUMRANGE},${OMLTGMONTHRANGE}?trueCondition)

same => n,Set(OMLTGCOUNTER=${INC(OMLTGCOUNTER)})
same => n,EndWhile()
same => n,Set(__OMLTGRESULT=0)
same => n,Return(FAIL DIALPLAN)

; true destination
same => n(trueCondition),Set(__OMLTGRESULT=1)
same => n,Return()


; AUX set range variables, cuando variables DESDE HASTA son iguales
same => n(setHourRange),Set(OMLTGDAYRANGE=${OMLTGDAYF})
same => n,Gosub(sub-oml-hangup,s,1(error de hora))

same => n(setDayRange),Set(OMLTGDAYRANGE=${OMLTGDAYF})
same => n,Goto(dayNumRangeSet)

same => n(setDayNumRange),Set(OMLTGDAYNUMRANGE=${OMLTGDAYNUMF})
same => n,Goto(monthRangeSet)

same => n(setMonthRange),Set(OMLTGMONTHRANGE=${OMLTGMONTHF})
same => n,Goto(checkTime)


[sub-oml-module-time-conditions]
include => sub-oml-module-time-conditions-custom

exten => s,1,Verbose(2, OMLTCID: ${ARG1})
same => n,Gosub(sub-oml-set-chanvars,s,1(${ARG1},TC))

same => n,GoSub(sub-oml-module-time-groups,s,1(${OMLTCTGID}))
same => n,GotoIf($["${OMLTGRESULT}" == "1"]?trueCondition:falseCondition)
same => n,Gosub(sub-oml-hangup,s,1(fallo time-conditions module))

; false destination
same => n(trueCondition),Gosub(sub-oml-dst-switch,s,1(${OMLTCTRUEDST}))
same => n,Gosub(sub-oml-hangup,s,1(fail time-conditions module))

; true destination
same => n(falseCondition),Gosub(sub-oml-dst-switch,s,1(${OMLTCFALSEDST}))
same => n,Gosub(sub-oml-hangup,s,1(fail time-conditions module))


[sub-oml-module-custmer-id]
include => sub-oml-module-custmer-id-custom

exten => s,1,Verbose(2, Inbound call customer identification ${ARG1})
same => n,Gosub(sub-oml-set-chanvars,s,1(${ARG1},CUSTOMERID))

same => n,Set(COUNTER=1)

same => n(idcontactReq),Read(__OMLCODCLI,${OMLCUSTOMERIDAUDIO},${OMLCUSTOMERIDLENGTH},,,${OMLCUSTOMERIDTIMEOUT})
same => n,GotoIf($[${ISNULL(${OMLCODCLI})}]?nullDTMF)

same => n,Playback(oml/${OMLINRLANG}/oml-number-is)
same => n,SayDigits(${OMLCODCLI})
same => n,Read(CONFIRM,oml/${OMLINRLANG}/oml-to-confirm-press-one,1,,,5)
same => n,GotoIf($["${CONFIRM}" == "1"]?confirm)

same => n(nullDTMF),Set(COUNTER=${INC(COUNTER)})
same => n,GotoIf($[${COUNTER} > ${OMLCUSTOMERIDRETRIES}]?goOut)
same => n,Goto(idcontactReq)

same => n(confirm),Verbose(ask about CUSTOMERID type)
same => n,GotoIf($[${OMLCUSTOMERIDTYPE} == 2]?withCrmTF)
same => n,GotoIf($[${OMLCUSTOMERIDTYPE} == 3]?withCrmDst)

same => n(withoutCrm),Verbose(2, only isnull OMLCODCLI test)
same => n,Gosub(sub-oml-dst-switch,s,1(${OMLCUSTOMERIDTRUEDST}))
same => n,Return()

same => n(withCrmTF),Verbose(2, CRM true/false choice)
same => n,Set(CURLOPT(ssl_verifypeer)=0)
same => n,Set(CURLOPT(dnstimeout)=10)
same => n,Set(CURLOPT(conntimeout)=10)
same => n,Set(CURLOPT(httptimeout)=10)
same => n,Set(CURLOPT(useragent)=OMniLeads)
same => n,Set(CURL_RESULT=${CURL(${OMLCUSTOMERIDEXTERNALURL)},idContact=${OMLCODCLI})})
same => n,Verbose(2,${JSONELEMENT(CURL_RESULT,status)})
same => n,Verbose(2,${JSONELEMENT(CURL_RESULT,destination)})
same => n,ExecIf($["${JSONELEMENT(CURL_RESULT,status)}" == "ok"]?Set(CRMCHOICE=${JSONELEMENT(CURL_RESULT,destination)}):Goto(goOut))
same => n,GotoIf($["${CRMCHOICE}" != "true"]?goOut)
same => n,Gosub(sub-oml-dst-switch,s,1(${OMLCUSTOMERIDTRUEDST}))
same => n,Return()

same => n(withCrmDst),Verbose(2, the CRM return de destination)
same => n,Set(CURLOPT(ssl_verifypeer)=0)
same => n,Set(CURLOPT(dnstimeout)=10)
same => n,Set(CURLOPT(conntimeout)=10)
same => n,Set(CURLOPT(httptimeout)=10)
same => n,Set(CURLOPT(useragent)=OMniLeads)
same => n,Set(CURL_RESULT=${CURL(${OMLCUSTOMERIDEXTERNALURL},idContact=${OMLCODCLI})})
same => n,Verbose(2,${JSONELEMENT(CURL_RESULT,status)})
same => n,Verbose(2,${JSONELEMENT(CURL_RESULT,destination)})
same => n,ExecIf($["${JSONELEMENT(CURL_RESULT,status)}" == "ok"]?Set(CRMCHOICE=${JSONELEMENT(CURL_RESULT,destination)}):Goto(goOut))
same => n,GotoIf($[${ISNULL(${CRMCHOICE})}]?goOut)
same => n,Gosub(sub-oml-dst-switch,s,1(${CRMCHOICE}))
same => n,Return()

same => n(goOut),Gosub(sub-oml-dst-switch,s,1(${OMLCUSTOMERIDFALSEDST}))
same => n,Return()


[sub-oml-module-custom-dst]
include => sub-oml-custom-dst-custom

exten => s,1,Verbose(2, Custom destination ${ARG1})
same => n,Gosub(sub-oml-set-chanvars,s,1(${ARG1},CUSTOMDST))

same => n,ExecIf($[${DIALPLAN_EXISTS(${OMLCUSTOMDSTDST})} == 1]?Goto(${OMLCUSTOMDSTDST}))
same => n,Gosub(sub-oml-dst-switch,s,1(${OMLCUSTOMDSTFAILOVER}))
same => n,Hangup()


[sub-oml-module-survey]
include => sub-oml-module-survey-custom

exten => s,1,Verbose(2, Welcome 2 OML Survey Module)
same => n,Set(OMLSURVEYID=${ARG1})
same => n,Set(OMLSURVEYNAME=${DB(OML/SURVEY/${OMLSURVEYID}/NAME)})
same => n,Set(OMLSURVEYQUESTIONS=${DB(OML/SURVEY/${OMLSURVEYID}/QUESTIONS)})
same => n,Set(OMLSURVEYINVRETRY=${DB(OML/SURVEY/${OMLSURVEYID}/RETRY)})
same => n,Set(OMLSURVEYTIMEOUT=${DB(OML/SURVEY/${OMLSURVEYID}/TIMEOUT)})

same => n,Playback(${DB(OML/SURVEY/${OMLSURVEYID}/WELCOMEAUDIO)})
same => n,Set(COUNTER=1)

same => n(while),GotoIf($[${COUNTER} <= ${OMLSURVEYQUESTIONS}]?:endWhile)

same => n,Set(OMLANS4QST${COUNTER}=${DB(OML/SURVEY/${OMLSURVEYID}/QST/${COUNTER}/ANSWERS)})
same => n,Set(OMLINVCOUNTER=1)
same => n(qstAudio),Read(OMLSURVEYANS,${DB(OML/SURVEY/${OMLSURVEYID}/QST/${COUNTER}/AUDIO)},,,1,${OMLSURVEYTIMEOUT})
same => n,Set(XCOUNTER=1)

same => n(answer),GotoIf($[${XCOUNTER} <= ${OMLANS4QST${COUNTER}}]?:incorrectAns)
same => n,GotoIf($[${OMLSURVEYANS} == ${DB(OML/SURVEY/${OMLSURVEYID}/QST/${COUNTER}/ANSWER/${XCOUNTER}/DTMF)}]?correctAns)
same => n,Set(XCOUNTER=${INC(XCOUNTER)})
same => n,Goto(answer)

same => n(incorrectAns),Verbose(2, no se ingreso una respuesta correcta, tengo que ver el tema retry ....)
same => n,Playback(pbx-invalid)
same => n,GotoIf($[ISNULL(${OMLSURVEYINVRETRY})]?nextQ)
same => n,Gosub(sub-oml-countdown,s,1(${OMLINVCOUNTER},${OMLSURVEYINVRETRY}))
same => n,GotoIf($["${GOSUB_RETVAL}" == "0"]?nextQ)
same => n,Goto(qstAudio)
same => n,Hangup()

same => n(correctAns),Verbose(2, Dest for answer ${OMLSURVEYANS}: ${DB(OML/SURVEY/${OMLSURVEYID}/QST/${COUNTER}/ANSWER/${XCOUNTER}/DST)})
same => n,Verbose(2, aca lanzo AGI o CURL con la respuesta ${OMLSURVEYANS} para la pregunta ${COUNTER})
same => n,Wait(5)
same => n,GotoIf($["${DB(OML/SURVEY/${OMLSURVEYID}/QST/${COUNTER}/ANSWER/${XCOUNTER}/DST)}" == "next"]?nextQ)
same => n,Gosub(sub-oml-dst-switch,s,1(${DB(OML/SURVEY/${OMLSURVEYID}/QST/${COUNTER}/ANSWER/${XCOUNTER}/DST)}))

same => n(nextQ),Set(COUNTER=${INC(COUNTER)})
same => n,Goto(while)

same => n(endWhile),Playback(${DB(OML/SURVEY/${OMLSURVEYID}/GREETINGAUDIO)})
