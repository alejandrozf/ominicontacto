; Copyright (C) 2018 Freetech Solutions

; This file is part of OMniLeads

; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.

; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.

; You should have received a copy of the GNU General Public License
; along with this program.  If not, see http://www.gnu.org/licenses/.

;
; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML     WARNING WARNING WARNING     OML OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML     WARNING WARNING WARNING     OML OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML     WARNING WARNING WARNING     OML OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML

;------------------------------------------------------------------------------------------------------------------	;
;------------------------------------------------------------------------------------------------------------------	;
; Do NOT edit this file as it is auto-generated by OMniLeads.  														;
; There are alternative files to make custom modifications, details at: http://omnileads.net/configuration_files 	;
;------------------------------------------------------------------------------------------------------------------	;
;------------------------------------------------------------------------------------------------------------------	;


; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML OML      WITHOUT CAMPAIGN CALLS     OML OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML OML      WITHOUT CAMPAIGN CALLS     OML OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML OML      WITHOUT CAMPAIGN CALLS     OML OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML

[sub-oml-dial-without-campaign]
; subrutina para el manejo de llamadas originadas por un Agente cuyo destino es otro Agente una Queue o un destino por fuera de una campaña
; ARG1 es el id del agente o id de campaña, al que se desea contactar
; ARG2 es el tipo de llamada interna

exten => s,1,Verbose(2, Internal calls)
same => n,Goto(${ARG2})
same => n,Gosub(sub-oml-hangup,s,1)

; Ag2Ag Call Ag2Ag Call Ag2Ag Call Ag2Ag Call Ag2Ag Call Ag2Ag Call Ag2Ag Call Ag2Ag Call Ag2Ag Call
; Ag2Ag Call Ag2Ag Call Ag2Ag Call Ag2Ag Call Ag2Ag Call Ag2Ag Call Ag2Ag Call Ag2Ag Call Ag2Ag Call
same => n(agentCall),Verbose(2, Ag2Ag Call)
same => n,AGI(omni-agent-status.py,GET,${ARG1})
same => n,Set(__OMLAGENT2CALL=${OMLAGENTSIP})
same => n,Set(__OMLAGENT2CALLID=${ARG1})
same => n,Set(__OMLAGENTSIPCALLER=${CALLERID(num)})
same => n,Set(__OMLAGENTIDCALLER=${CUT(CALLERID(name),_,1)})
same => n,Set(__OMLMANUALCALLTYPEID=agent2agent)

same => n,GotoIf($["${OMLAGENTSTATUS}" != "READY"]?nonReady)

same => n,AGI(omni-agent-status.py,SET,${OMLAGENTIDCALLER},DIALING,${EPOCH},INTERNAL,${OMLAGENTNAME})
same => n,Dial(PJSIP/${OMLAGENT2CALL},45,tTcb(sub-oml-pre-agent2agent-chan,s,1(${OMLAGENTNAME}))U(sub-oml-internalcall-connect^withoutCampAgentCalled))
same => n(hangup),Gosub(sub-oml-hangup,s,1)

same => n(nonReady),Set(DIALSTATUS=BUSY)
same => n,Background(${OMLLANG}/please-try-again)
same => n,Gosub(sub-oml-hangup,s,1)

; pbx2Ag Call pbx2Ag Call pbx2Ag Call pbx2Ag Call pbx2Ag Call pbx2Ag Call pbx2Ag Call
; pbx2Ag Call pbx2Ag Call pbx2Ag Call pbx2Ag Call pbx2Ag Call pbx2Ag Call pbx2Ag Call
same => n(pbx2AgCall),Verbose(2, PBX2Ag Call)
same => n,AGI(omni-agent-status.py,GET,${ARG1})
same => n,Set(__OMLAGENT2CALLID=${ARG1})
same => n,Set(__OMLAGENTSIPCALLER=${CALLERID(num)})
same => n,Set(__OMLMANUALCALLTYPEID=agent2agent)

same => n,GotoIf($["${OMLAGENTSTATUS}" != "READY"]?nonReady)

same => n,Dial(PJSIP/${OMLAGENTSIP},45,tTcb(sub-oml-pre-pbx2agent-chan,s,1)U(sub-oml-internalcall-connect^withoutCampPbx2AgentCall))
same => n(hangup),Gosub(sub-oml-hangup,s,1)

same => n(nonReady),Set(DIALSTATUS=BUSY)
same => n,Background(${OMLLANG}/please-try-again)
same => n,Gosub(sub-oml-hangup,s,1)


; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML OML      TRANSFERS      OML OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML OML      TRANSFERS      OML OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML OML      TRANSFERS      OML OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML


[sub-oml-ag2ag-blind-transfer]
; agentTransferCall ; agentTransferCall ; agentTransferCall ; agentTransferCall ; agentTransferCall ; agentTransferCall
; agentTransferCall ; agentTransferCall ; agentTransferCall ; agentTransferCall ; agentTransferCall ; agentTransferCall
; Inboubd -> SIP/trunk....... | Manual -> | Dialer -> Local/OMLOUTNUM@from-oml......;1 | Preview ->

exten => s,1,Verbose(2, transfer call ${CHANNEL} to '${ARG1}' agent)

same => n,Set(__OMLTRANSFERTYPE=ag2agBlindTransfer)
same => n,Set(__OMLAGENTTRANSFERDSTID=${ARG1})
same => n,Set(__OMLAGENTNAMEFROM=${SHARED(OMLAGENTNAME,${OMLMOTHERCHAN})})
same => n,AGI(omni-agent-status.py,GET,${ARG1})
same => n,Set(__OMLAGENTSIPTRANSFERDST=${OMLAGENTSIP})
same => n,Set(__OMLAGENTID=${SHARED(OMLAGENTID,${OMLMOTHERCHAN})})
same => n,Set(__OMLCAMPRECFILENAME=${SHARED(OMLCAMPRECFILENAME,${OMLMOTHERCHAN})})
same => n,ExecIf($["${OMLCALLTYPE}" == "dialer"]?Set(__OMLAGENTNAMEFROM=${MEMBERNAME}))
same => n,Set(__OMLCALLTYPEIDFROM=${OMLCALLTYPEID})
same => n,Set(__TRANSFERID=8)
same => n,Set(__OMLCALLTYPEID=8)

same => n,Set(__OMLYEARZEROTRANSFER=${EPOCH})
same => n,Set(__OMLCALLWAITDURATION=${SHARED(OMLCALLWAITDURATION,${OMLMOTHERCHAN})})
same => n,Set(__OMLCALLDURATION=$[${EPOCH} - ${SHARED(OMLANSWERTIMESTAMP,${OMLMOTHERCHAN})}])
same => n,Set(__OMLCALLSTATUS=BT-TRY)
same => n,Set(SHARED(OMLCALLSTATUS,${OMLMOTHERCHAN})=BT-TRY)

same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},${OMLAGENTID}-${OMLAGENTTRANSFERDSTID},${OMLCALLSTATUS},${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCAMPTYPE},${OMLCALLWAITDURATION},${OMLCALLDURATION},${OMLCAMPRECFILENAME},call))
same => n,GotoIf($["${OMLAGENTSTATUS}" != "READY"]?nonReady)

same => n,Dial(PJSIP/${OMLAGENTSIPTRANSFERDST},90,tTcb(sub-oml-pre-agent-transfer-chan,s,1(1,${OMLAGENTNAMEFROM}))U(sub-oml-blind-transfer-agent-connect^${OMLUNIQUEID}^${OMLAGENTID}^${OMLCAMPQNAME}^${OMLMOTHERCHAN}^${OMLYEARZEROTRANSFER}^${OMLMANUALCALLTYPEID}^${OMLAGENTSIP}^${TRANSFERID}^${OMLCAMPTYPE}))
same => n(dialTransferFail),Set(TRANSFERFAILDIALSTATUS=${DIALSTATUS})
same => n,Set(__OMLCALLSTATUS=BT-${DIALSTATUS})
same => n,Set(SHARED(OMLCALLSTATUS,${OMLMOTHERCHAN})=BT-${DIALSTATUS})
same => n,Background(${OMLLANG}/please-try-again)
same => n,Playtones(busy)
same => n,Gosub(sub-oml-hangup,s,1(FAIL FAIL FAIL - oml-ag2ag-blind-transfer))

same => n(nonReady),Set(DIALSTATUS=BUSY)
same => n,Goto(dialTransferFail)


[sub-oml-ag2ag-consult-transfer]
; agentConsultTransferCall ; agentConsultTransferCall ; agentConsultTransferCall ; agentConsultTransferCall
; agentConsultTransferCall ; agentConsultTransferCall ; agentConsultTransferCall ; agentConsultTransferCall
; Inboubd -> SIP/trunk....... | Manual -> | Dialer -> | Preview ->


exten => s,1,Verbose(2, consult transfer call ${CHANNEL} to '${ARG1}' agent - ${TRANSFERERNAME})
same => n,Set(CHANNEL(hangup_handler_push)=rip-ctransfer-aux-channel,s,1)

same => n,AGI(omni-agent-status.py,GET,${ARG1})

same => n,Set(__OMLTRANSFERTYPE=ag2agConsultTransfer)
same => n,Set(__OMLAGENTTRANSFERDSTID=${ARG1})
same => n,Set(SHARED(OMLAGENTTRANSFERDSTID,${OMLMOTHERCHAN})=${ARG1})
same => n,Set(__OMLAGENTSIPTRANSFERDST=${OMLAGENTSIP})
same => n,Set(SHARED(OMLAGENTSIPTRANSFERDST,${OMLMOTHERCHAN})=${OMLAGENTSIPTRANSFERDST})
same => n,Set(__OMLCAMPRECFILENAME=${SHARED(OMLCAMPRECFILENAME,${OMLMOTHERCHAN})})
same => n,Set(__OMLAGENTNAMEFROM=${SHARED(OMLAGENTNAME,${OMLMOTHERCHAN})})
same => n,ExecIf($["${OMLCAMPTYPE}" != "1"]?Set(__OMLAGENTID=${SHARED(OMLAGENTID,${OMLMOTHERCHAN})}))
same => n,ExecIf($["${OMLCALLTYPE}" == "dialer"]?Set(__OMLAGENTNAMEFROM=${MEMBERNAME}))
same => n,Set(__OMLCALLTYPEIDFROM=${OMLCALLTYPEID})
same => n,Set(__TRANSFERID=8)
same => n,Set(__OMLCALLTYPEID=8)

same => n,Set(SHARED(OMLOUTNUMTRANSFER,${OMLMOTHERCHAN})=${ARG1})

same => n,Set(__OMLYEARZEROTRANSFER=${EPOCH})
same => n,Set(__OMLCALLWAITDURATION=${SHARED(OMLCALLWAITDURATION,${OMLMOTHERCHAN})})
same => n,Set(__OMLCALLDURATION=$[${EPOCH} - ${SHARED(OMLANSWERTIMESTAMP,${OMLMOTHERCHAN})}])
same => n,Set(__OMLCALLSTATUS=CT-TRY)
same => n,Set(SHARED(OMLCALLSTATUS,${OMLMOTHERCHAN})=${OMLCALLSTATUS})

same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},${OMLAGENTID}-${OMLAGENTTRANSFERDSTID},${OMLCALLSTATUS},${OMLOUTNUM},${OMLCODCLI},${TRANSFERID},${OMLCAMPTYPE},${OMLCALLWAITDURATION},${OMLCALLDURATION},,call))
same => n,GotoIf($["${OMLAGENTSTATUS}" != "READY"]?nonReady)

same => n,Set(PJSIP_HEADER(add,OMLFROMAGENT)=${OMLAGENTNAME})
same => n,Dial(PJSIP/${OMLAGENTSIPTRANSFERDST},90,tTcb(sub-oml-pre-agent-transfer-chan,s,1(2,${OMLAGENTNAMEFROM}))U(sub-oml-consult-transfer-agent-connect^${OMLUNIQUEID}^${OMLAGENTID}^${OMLCAMPQNAME}^${OMLMOTHERCHAN}^${OMLYEARZEROTRANSFER}^${TRANSFERID}^${OMLCAMPTYPE}))
same => n(dialTransferFail),Set(__OMLCALLSTATUS=CT-${DIALSTATUS})
same => n,Set(SHARED(OMLCALLSTATUS,${OMLMOTHERCHAN})=${OMLCALLSTATUS})
same => n,Background(${OMLLANG}/please-try-again)
same => n,Playtones(busy)
same => n,Gosub(sub-oml-hangup,s,1(FAIL FAIL FAIL - oml-ag2ag-blind-transfer))

same => n(nonReady),Set(DIALSTATUS=BUSY)
same => n,Goto(dialTransferFail)


[sub-oml-ag2camp-transfer]
; transferencias hacia una campaña transferencias hacia una campaña transferencias hacia una campaña
exten => s,1,Verbose(2, internal agent to queue call)

same => n,Set(__OMLCAMPIDFROM=${OMLCAMPID})
same => n,Set(__OMLCAMPTYPEFROM=${OMLCAMPTYPE})
same => n,Set(SHARED(OMLCAMPTYPEFROM,${OMLMOTHERCHAN})=${OMLCAMPTYPE})
same => n,Set(__OMLCAMPTID=${ARG1})
same => n,Set(__OMLAGENTID=${SHARED(OMLAGENTID,${OMLMOTHERCHAN})})
same => n,Set(__OMLYEARZEROTRANSFER=${EPOCH})
same => n,Set(__OMLCALLWAITDURATION=${SHARED(OMLCALLWAITDURATION,${OMLMOTHERCHAN})})
same => n,Set(__OMLCALLDURATION=$[${EPOCH} - ${SHARED(OMLANSWERTIMESTAMP,${OMLMOTHERCHAN})}])
same => n,Set(__OMLCALLSTATUS=CAMPT-TRY)
same => n,Set(__OMLCAMPRECFILENAMEORIG=${SHARED(OMLCAMPRECFILENAME,${OMLMOTHERCHAN})})
same => n,Set(SHARED(OMLCALLSTATUS,${OMLMOTHERCHAN})=${OMLCALLSTATUS})
same => n,Set(SHARED(OMLCALLTYPEID,${OMLMOTHERCHAN})=${OMLCALLTYPEID})
same => n,Set(__OMLOUTNUM=${OMLOUTNUM})
same => n,Set(__OMLAGENTSIP=${OMLAGENTSIP})

same => n,ExecIf($["${OMLCAMPRECFILENAMEORIG}" != ""]?StopMixMonitor(${OMLCAMPRECFILENAMEORIG}.wav)

same => n,Gosub(sub-oml-set-chanvars,s,1(${ARG1},CAMP))

same => n,ExecIf($["${OMLCALLTYPE}" == "4" || "${OMLCALLTYPE}" == "1"]?Set(__OMLFROMAGENTID=${OMLAGENTID}):Set(__OMLFROMAGENTID=${CUT(MEMBERNAME,_,1)}))

same => n,Set(__OMLTRANSFERTYPE=ag2CampTransfer)
same => n,Set(__OMLCAMPTRANSFERID=${ARG1})
same => n,Set(__TRANSFERID=8)
same => n,Set(__OMLCALLTYPEID=8)
same => n,Set(__OMLCAMPDSTTYPE=${OMLCAMPTYPE})

same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},${OMLAGENTID}-${OMLCAMPTRANSFERID},${OMLCALLSTATUS},${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCAMPTYPEFROM},${OMLCALLWAITDURATION},${OMLCALLDURATION},,call))

same => n,Set(__OMLCALLTYPE=transfer)

same => n,ExecIf($["${OMLCAMPREC}" == "True"]?GoSub(sub-oml-recorder,s,1(campT${OMLCAMPRECFILENAMETRANSFER},${OMLUNIQUEID})))

same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPTRANSFERID},${OMLUNIQUEID},,ENTERQUEUE-TRANSFER,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},3,,${OMLCAMPID},${OMLAGENTID},call))
same => n,Verbose(2, ${OMLCAMPID} - ${OMLAGENTID})

same => n,Queue(${OMLCAMPQNAME},tTcb(sub-oml-pre-agent-camptransfer-chan,s,1(${OMLOUTNUM})),,,${OMLCAMPQUEUETIME},,,sub-oml-camp-transfer-connect)
same => n,GotoIf($["${QUEUESTATUS}" == "TIMEOUT"]?execFailover:agentHangedup)
same => n(execFailover),Gosub(sub-oml-failover-dst,s,1(${OMLCAMPTRANSFERID},queue))
same => n,Hangup()

same => n(agentHangedup),Set(OMLSIDEHANGUP=${IF($["${QUEUESTATUS}" == "CONTINUE"]?2)})
same => n,Hangup()




; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML 		  INBOUND CALLS         OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML 		  INBOUND CALLS         OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML 		  INBOUND CALLS         OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML


[sub-oml-in-check-set]
; sub-oml-in-check-set aplica a llamadas entrantes
; se reciben como parametros el id de la camp

include => sub-oml-in-check-set-custom

exten => s,1,Verbose(2, setting some channel variables)
same => n,Set(__OMLCAMPID=${ARG1})

same => n,Gosub(sub-oml-set-chanvars,s,1(${OMLCAMPID},CAMP))

same => n,ExecIf($["${OMLCAMPQNAME}" != ""]?Gosub(sub-oml-campaign-3,s,1(${OMLCAMPID})))
same => n,Gosub(sub-oml-hangup,s,1)

[sub-oml-campaign-3]
; subrutine for Inbound Calls (3)

include => sub-oml-campaign-inbound-custom

exten => s,1,Verbose(2, deliver inbound call)

same => n,GotoIf($["${OMLFAILOVER}" == "true"]?goHeader)

same => n,Answer()
same => n,ExecIf($["${IVRBREAKOUT}" != "TRUE"]?Set(CHANNEL(hangup_handler_push)=rip-in-trunk-chan,s,1))

same => n(goHeader),Set(__OMLUNIQUEID=${UNIQUEID})
same => n,Set(__OMLCALLSTATUS=ENTERQUEUE)
same => n,Set(__OMLMOTHERCHAN=${CHANNEL})

same => n,Set(CHANNEL(musicclass)=default)
same => n,ExecIf($["${OMLCAMPMOH}" != ""]?Set(CHANNEL(musicclass)=${OMLCAMPMOH}))
same => n,ExecIf($["${OMLCAMPREC}" == "True"]?GoSub(sub-oml-recorder,s,1(${OMLCAMPRECFILENAME},${OMLUNIQUEID})))

same => n,ExecIf($["${OMLCAMPWELCOMEPLAY}" != ""]?Background(${OMLCAMPWELCOMEPLAY}))

same => n,Set(__OMLYEARZERO=${EPOCH})
same => n,ExecIf($["${IVRBREAKOUT}" != "TRUE"]?Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},${OMLAGENTID},ENTERQUEUE,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCAMPTYPE},,,,call)))
same => n,Queue(${OMLCAMPQNAME},tTcb(sub-oml-pre-agent-queue-chan,s,1),,,${OMLCAMPQUEUETIME},,,sub-oml-queue-inbound-connect-agent)

same => n,GotoIf($["${QUEUESTATUS}" == "TIMEOUT"]?execFailover:agentHangedup)
same => n(execFailover),Gosub(sub-oml-failover-dst,s,1(${OMLCAMPID},queue))
same => n,Hangup()
same => n(agentHangedup),Set(OMLSIDEHANGUP=${IF($["${QUEUESTATUS}" == "CONTINUE"]?2)})
same => n,Hangup()


; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML          OUTBOUND CALLS         OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML          OUTBOUND CALLS         OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML          OUTBOUND CALLS         OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML

[sub-oml-out-check-set]
; sub-oml-outr-check-set aplica a llamadas salientes
; se reciben como parametros el id de la camp ${ARG1}
; check de HEADERS(phoneJS calls) y Channel Var (wd o c2c calls) para determinar el tipo de llamada/campaña
; Es invocada por: [oml-dial-out] (oml_extensions.conf)

include => sub-oml-out-check-set-custom

exten => s,1,Verbose(2, Check if outbound call is from OML Endpoint)
same => n,Verbose(2, BLIND-TRANSFER 2 OMLOUTNUM ?)
same => n,GotoIf($["${BLINDTRANSFER}" != ""]?transferOutCall)
same => n,Verbose(2, CONSULT-TRANSFER 2 OMLOUTNUM ?)
same => n,GotoIf($["${ATTENDEDTRANSFER}" != ""]?consultTransferOutCall)
same => n,Verbose(2, from CLICK2CALL/PREVIEW 2 OMLOUTNUM ?)
same => n,GotoIf($["${origin}" == "preview"]?preview)
same => n,GotoIf($["${origin}" == "withoutCamp"]?withoutCamp)
same => n,GotoIf($["${origin}" == "contactos" | "${origin}" == "agendas" | "${origin}" == "click2call" | "${origin}" == "calificaciones"]?click2call)
same => n,Verbose(2, from WOMBATDIALER 2 OMLOUTNUM ?)
same => n,GotoIf($["${WOMBAT_HOPPER_ID}" != ""]?dialer)
same => n,Playback(${OMLLANG}/tt-weasels)
same => n,Gosub(sub-oml-hangup,s,1(FAIL FAIL FAIL - ${CONTEXT}))

; Wombat Dialer Calls
same => n(dialer),Verbose(2, dialer call)
same => n,Set(__OMLCAMPID=${ID_CAMPANA})
same => n,Set(__OMLAGENTID=dialer-dialout)
same => n,Set(__OMLCODCLI=${ID_CLIENTE})
same => n,Set(__OMLDIALERCHAN=originateChannel)
same => n,Set(__OMLCALLTYPEID=2)
same => n,Set(__OMLCALLTYPE=dialerCall)
same => n,Set(__OMLOUTNUM=${ARG1})
same => n,Set(SHARED(OMLCODCLI,${CHANNEL})=${ID_CLIENTE})
same => n,Gosub(sub-oml-set-chanvars,s,1(${OMLCAMPID},CAMP))
same => n,Return()

; click2call calls
same => n(click2call),Verbose(2, c2c call)
same => n,Set(__OMLCAMPID=${IdCamp})
same => n,Set(__OMLCODCLI=${codCli})
same => n,Set(__OMLAGENTID=${CUT(FTSAGENTE,_,1)})
same => n,Set(__OMLCALLTYPEID=1)
same => n,Set(__OMLCALLTYPE=click2Call)
same => n,Set(__OMLOUTNUM=${ARG1})
same => n,Set(__OMLAGENTLOCALCHAN=${CUT(CHANNEL,\;,1)}\;2)
same => n,Set(__OMLCAMPOUTCID=${IMPORT(${OMLAGENTLOCALCHAN},OMLCAMPOUTCID)})
same => n,Set(__OMLCAMPQNAME=${IMPORT(${OMLAGENTLOCALCHAN},OMLCAMPQNAME)})
same => n,Set(__OMLCAMPREC=${IMPORT(${OMLAGENTLOCALCHAN},OMLCAMPREC)})
same => n,Set(__OMLCAMPTYPE=${IMPORT(${OMLAGENTLOCALCHAN},OMLCAMPTYPE)})
same => n,Set(__OMLUNIQUEID=${IMPORT(${OMLAGENTLOCALCHAN},OMLUNIQUEID)})
same => n,Set(__OMLCAMPRECFILENAME=${IMPORT(${OMLAGENTLOCALCHAN},OMLCAMPRECFILENAME)})
same => n,Set(__OMLCAMPOUTR=${IMPORT(${OMLAGENTLOCALCHAN},OMLCAMPOUTR)})
same => n,Goto(return)

; previewCalls
same => n(preview),Verbose(2, preview call)
same => n,Set(__OMLCAMPID=${IdCamp})
same => n,Set(__OMLCODCLI=${codCli})
same => n,Set(__OMLAGENTID=${CUT(FTSAGENTE,_,1)})
same => n,Set(__OMLCALLTYPEID=4)
same => n,Set(__OMLCALLTYPE=previewCall)
same => n,Set(__OMLOUTNUM=${ARG1})
same => n,Set(__OMLAGENTLOCALCHAN=${CUT(CHANNEL,\;,1)}\;2)
same => n,Set(__OMLCAMPOUTCID=${IMPORT(${OMLAGENTLOCALCHAN},OMLCAMPOUTCID)})
same => n,Set(__OMLCAMPQNAME=${IMPORT(${OMLAGENTLOCALCHAN},OMLCAMPQNAME)})
same => n,Set(__OMLCAMPREC=${IMPORT(${OMLAGENTLOCALCHAN},OMLCAMPREC)})
same => n,Set(__OMLCAMPTYPE=${IMPORT(${OMLAGENTLOCALCHAN},OMLCAMPTYPE)})
same => n,Set(__OMLUNIQUEID=${IMPORT(${OMLAGENTLOCALCHAN},OMLUNIQUEID)})
same => n,Set(__OMLCAMPRECFILENAME=${IMPORT(${OMLAGENTLOCALCHAN},OMLCAMPRECFILENAME)})
same => n,Set(__OMLCAMPOUTR=${IMPORT(${OMLAGENTLOCALCHAN},OMLCAMPOUTR)})
same => n,Goto(return)

; withoutCamp click2call calls
same => n(withoutCamp),Verbose(2, c2c call)
same => n,Set(__OMLCAMPID=0)
same => n,Set(__OMLAGENTID=${CUT(CALLERID(name),_,1)})
same => n,Set(__OMLCODCLI=0)
same => n,Gosub(sub-oml-set-chanvars,s,1(${OMLAGENTID},agent))
same => n,Set(__OMLCALLTYPEID=7)
same => n,Set(__OMLCALLTYPE=withoutCamp)
same => n,Set(__OMLOUTNUM=${ARG1})
same => n,Goto(return)

; blind transfer hacia un destino externo (trunk)
same => n(transferOutCall),Verbose(2, transfer call)
same => n,Set(__OMLTRANSFERTYPE=blindTransferOutCall)
same => n,Set(__OMLCALLTYPEID=9)
same => n,Set(__OMLCODCLI=${codCli})
same => n,Set(__OMLOUTNUMTRANSFER=${ARG1})
same => n,Goto(goCampContext)

; consult transfer hacia un destino externo (trunk)
same => n(consultTransferOutCall),Verbose(2, transfer call)
same => n,Set(__OMLTRANSFERTYPE=consultTransferOutCall)
same => n,Set(__OMLCALLTYPEID=9)
same => n,Set(__OMLCODCLI=${codCli})
same => n,Set(__OMLOUTNUMTRANSFER=${ARG1})
same => n,Set(SHARED(OMLOUTNUMTRANSFER,${OMLMOTHERCHAN})=${ARG1})
same => n,Goto(goCampContext)

; return from subrutine
same => n(return),GotoIf($["${OMLAGENTID}" != ""]?queuecheck)
same => n,Verbose(2, NO AGENT no tracking outbound)
same => n,Gosub(sub-oml-hangup,s,1(FAIL FAIL FAIL - Not OMLAGENTID set))
same => n(queuecheck),GotoIf($["${OMLCAMPID}" != ""]?goCampContext)
same => n,Verbose(2, NO QUEUE no tracking outbound)
same => n,Gosub(sub-oml-hangup,s,1(FAIL FAIL FAIL - Not OMLCAMPID set))
same => n(goCampContext),Return()


[sub-oml-campaign-1]
; esta subrutina procesa los intentos de llamadas click2call
; Es invocada por [oml-dial-out] (oml_extensions.conf)

include => sub-oml-campaign-1-custom

exten => s,1,Verbose(2, Welcom to ${CONTEXT} - Subrutine for Click2Call Calls)
same => n,Set(CHANNEL(hangup_handler_push)=rip-manualcall-originate-dialout-chan,s,1)

same => n,Set(__OMLC2CDIALOUTCHAN=${CHANNEL})
same => n,Set(__OMLMOTHERCHAN=${CUT(CHANNEL,\;,1)}\;2)
same => n,Set(__OMLUNIQUEID=${IMPORT(${OMLMOTHERCHAN},OMLUNIQUEID)})

same => n,Set(__OMLYEARZERO=${EPOCH})

;same => n,Set(__OMLCODCLI=${SHARED(OMLCODCLI,${OMLMOTHERCHAN})})

; compruebo cantidad de llamadas activas concurrentes
;......
;......
;compruebo si estamos dentro de la hora establecida para llamar TC
;......
;......
;compruebo si no tengo que disparar algun AGI
;......
;......
;compruebo FLAG de ON/OFF de la campaña
;......
;......

same => n(queueLog),Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},${OMLAGENTID},DIAL,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCAMPTYPE},,,,call))
same => n,Gosub(sub-oml-blacklist,s,1(${OMLOUTNUM},${OMLCALLTYPEID},${OMLCAMPID}))
same => n,GotoIf($["${GOSUB_RETVAL}" == "1"]?blacklistTrue)

same => n,ExecIf($["${OMLCAMPOUTR}" != ""]?Goto(oml-outr-${OMLCAMPOUTR},${OMLOUTNUM},1)

same => n,Goto(oml-outr,${OMLOUTNUM},1)
same => n,Set(SHARED(OMLCALLSTATUS,${OMLMOTHERCHAN})=${OMLCALLSTATUS})
same => n,Gosub(sub-oml-hangup,s,1)

same => n(blacklistTrue),Set(SHARED(OMLCALLSTATUS,${OMLPREVIEWDIALOUTCHAN})=${DIALSTATUS})
same => n,Set(SHARED(OMLCALLSTATUS,${OMLMOTHERCHAN})=${DIALSTATUS})
same => n,Gosub(sub-oml-hangup,s,1)


[sub-oml-campaign-2]
; esta subrutina procesa los intentos de llamadas del DIALER CALLS
; la recorre los canales tipo Local/XXXXkjkajkja......;2 (es decir quien origina el Dial)
; Es invocada por [oml-dial-out] (oml_extensions.conf)

include => sub-oml-campaign-2-custom

exten => s,1,Verbose(2, ${UNIQUEID} - Welcom to ${CONTEXT} - Subrutine for Dialer Calls)
same => n,Set(CHANNEL(hangup_handler_push)=rip-dialer-originate-dial-outnum-chan,s,1)
; compruebo si hay que grabar la llamada
; compruebo cantidad de llamadas activas concurrentes
;......
;......
;compruebo si estamos dentro de la hora establecida para llamar TC
;......
;......
;compruebo si no tengo que disparar algun AGI
;......
;......
;compruebo FLAG de ON/OFF de la campaña
;......
;......

same => n,Set(__OMLUNIQUEID=${UNIQUEID})
same => n,Set(__OMLYEARZERO=${EPOCH})
same => n,Set(__OMLCALLSTATUS=DIAL)
same => n,Set(__OMLMOTHERCHAN=${CHANNEL})

same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},${OMLAGENTID},${OMLCALLSTATUS},${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCAMPTYPE},,,,call))
same => n,Gosub(sub-oml-blacklist,s,1(${OMLOUTNUM},${OMLCALLTYPEID},${OMLCAMPID}))
same => n,GotoIf($["${GOSUB_RETVAL}" == "1"]?blacklistTrue)

same => n,ExecIf($["${OMLCAMPOUTR}" != ""]?Goto(oml-outr-${OMLCAMPOUTR},${OMLOUTNUM},1)

same => n,Goto(oml-outr,${OMLOUTNUM},1)
same => n,Gosub(sub-oml-hangup,s,1)

same => n(blacklistTrue),Gosub(sub-oml-hangup,s,1)



[sub-oml-campaign-2-deliver-contactcall]
; esta subrutina procesa los llamados contactados por el DIALER
; Es invocada por el DIALER, ya que es el "terminal" de WD a donde envia
; todas las llamadas conectadas de todas las campañas - Local/XXXX:..........;1 (Canal creado por el originate:context WD)

include => sub-oml-campaign-2-deliver-contactcall-custom

exten => s,1,Verbose(2, deliver dialer contact call)

same => n,Set(CHANNEL(hangup_handler_push)=rip-dialer-originate-queue-chan,s,1)

same => n,Set(__OMLOUTNUM=${CUT(CHANNEL,/,2)})
same => n,Set(__OMLOUTNUM=${CUT(OMLOUTNUM,@,1)})
same => n,Set(__OMLCAMPID=${ID_CAMPANA})
same => n,Set(__OMLCALLTYPEID=2)
same => n,Set(__OMLCALLTYPE=dialer)
same => n,Set(__OMLCODCLI=${ID_CLIENTE})

same => n,Set(__OMLMOTHERCHAN=${CHANNEL})
same => n,Set(__OMLDIALERDIALOUTCHAN=${CUT(CHANNEL,\;,1)}\;2)

same => n,Set(__OMLCAMPOUTCID=${IMPORT(${OMLDIALERDIALOUTCHAN},OMLCAMPOUTCID)})
same => n,Set(__OMLCAMPQNAME=${IMPORT(${OMLDIALERDIALOUTCHAN},OMLCAMPQNAME)})
same => n,Set(__OMLCAMPQUEUETIME=${IMPORT(${OMLDIALERDIALOUTCHAN},OMLCAMPQUEUETIME)})
same => n,Set(__OMLCAMPFAILOVERDST=${IMPORT(${OMLDIALERDIALOUTCHAN},OMLCAMPFAILOVERDST)})
same => n,Set(__OMLCAMPFAILOVER=${IMPORT(${OMLDIALERDIALOUTCHAN},OMLCAMPFAILOVER)})
same => n,Set(__OMLCAMPAMD=${IMPORT(${OMLDIALERDIALOUTCHAN},OMLCAMPAMD)})
same => n,Set(__OMLCAMPAMDAUDIO=${IMPORT(${OMLDIALERDIALOUTCHAN},OMLCAMPAMDAUDIO)})
same => n,Set(__OMLCAMPREC=${IMPORT(${OMLDIALERDIALOUTCHAN},OMLCAMPREC)})
same => n,Set(__OMLCAMPTYPE=${IMPORT(${OMLDIALERDIALOUTCHAN},OMLCAMPTYPE)})
same => n,Set(__OMLCAMPQNAME=${IMPORT(${OMLDIALERDIALOUTCHAN},OMLCAMPQNAME)})
same => n,Set(__OMLUNIQUEID=${IMPORT(${OMLDIALERDIALOUTCHAN},OMLUNIQUEID)})
same => n,Set(__OMLCAMPRECFILENAME=${IMPORT(${OMLDIALERDIALOUTCHAN},OMLCAMPRECFILENAME)})
same => n,Set(__OMLCAMPOUTR=${IMPORT(${OMLDIALERDIALOUTCHAN},OMLCAMPOUTR)})

same => n,Set(__OMLYEARZERO=${EPOCH})
same => n,Set(__OMLCALLSTATUS=ENTERQUEUE)
same => n,Set(SHARED(OMLCALLSTATUS,${OMLDIALERDIALOUTCHAN})=ENTERQUEUE)

same => n,Set(CALLERID(num)=${WOMBAT_DIALING_NUMBER})

same => n,Gosub(sub-oml-amd,s,1(${OMLCAMPID},${UNIQUEID}))

same => n,ExecIf($["${OMLCAMPREC}" == "True"]?GoSub(sub-oml-recorder,s,1(${OMLCAMPRECFILENAME},${OMLUNIQUEID})))

same => n,ExecIf($["${OMLCAMPWELCOMEPLAY}" != ""]?Background(${OMLCAMPWELCOMEPLAY}))
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},,${OMLCALLSTATUS},${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCAMPTYPE},,,,call))
same => n,Queue(${OMLCAMPQNAME},ctTb(sub-oml-pre-agent-queue-chan-dialer,s,1),,,${OMLCAMPQUEUETIME},,,sub-oml-queue-dialer-connect-agent)

same => n,GotoIf($["${QUEUESTATUS}" == "TIMEOUT"]?execFailover:agentHagedup)
same => n(execFailover),Gosub(sub-oml-failover-dst,s,1(${OMLCAMPID},queue))
same => n,Hangup()
same => n(agentHagedup),Set(OMLSIDEHANGUP=${IF($["${QUEUESTATUS}" == "CONTINUE"]?2)})
same => n,Hangup()


[sub-oml-campaign-4]
; esta subrutina procesa los intentos de llamadas del Preview
; Es invocada por [oml-dial-out] (oml_extensions.conf)

include => sub-oml-campaign-4-custom

exten => s,1,Verbose(2, Welcom to ${CONTEXT} - Subrutine for Preview Calls)
same => n,Set(CHANNEL(hangup_handler_push)=rip-preview-originate-dialout-chan,s,1)

same => n,Set(__OMLPREVIEWDIALOUTCHAN=${CHANNEL})
same => n,Set(__OMLMOTHERCHAN=${CUT(CHANNEL,\;,1)}\;2)
same => n,Set(__OMLUNIQUEID=${IMPORT(${OMLMOTHERCHAN},OMLUNIQUEID)})

same => n,Set(__OMLYEARZERO=${EPOCH})

;same => n,Set(__OMLCODCLI=${SHARED(OMLCODCLI,${OMLMOTHERCHAN})})

; compruebo cantidad de llamadas activas concurrentes
;......
;......
;compruebo si estamos dentro de la hora establecida para llamar TC
;......
;......
;compruebo si no tengo que disparar algun AGI
;......
;......
;compruebo FLAG de ON/OFF de la campaña
;......
;......

same => n(queueLog),Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},${OMLAGENTID},DIAL,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCAMPTYPE},,,,call))
same => n,Gosub(sub-oml-blacklist,s,1(${OMLOUTNUM},${OMLCALLTYPEID},${OMLCAMPID}))
same => n,GotoIf($["${GOSUB_RETVAL}" == "1"]?blacklistTrue)

same => n,ExecIf($["${OMLCAMPOUTR}" != ""]?Goto(oml-outr-${OMLCAMPOUTR},${OMLOUTNUM},1)

same => n,Goto(oml-outr,${OMLOUTNUM},1)
same => n,Set(SHARED(OMLCALLSTATUS,${OMLMOTHERCHAN})=${OMLCALLSTATUS})
same => n,Gosub(sub-oml-hangup,s,1)

same => n(blacklistTrue),Set(SHARED(OMLCALLSTATUS,${OMLPREVIEWDIALOUTCHAN})=${DIALSTATUS})
same => n,Set(SHARED(OMLCALLSTATUS,${OMLMOTHERCHAN})=${DIALSTATUS})
same => n,Gosub(sub-oml-hangup,s,1)


[sub-oml-campaign-7]
; esta subrutina procesa los intentos de llamadas click2call sin campaña
; Es invocada por [oml-dial-out] (oml_extensions.conf)

include => sub-oml-campaign-7-custom

exten => s,1,Verbose(2, Welcome to ${CONTEXT} - Subrutine for Click2Call Calls)
same => n,Set(CHANNEL(hangup_handler_push)=rip-withoutcamp-originate-dialout-chan,s,1)

same => n,Set(__OMLCALLTYPEID=7)

same => n,Set(__OMLC2CDIALOUTCHAN=${CHANNEL})
same => n,Set(__OMLMOTHERCHAN=${CUT(CHANNEL,\;,1)}\;2)
same => n,Set(__OMLUNIQUEID=${IMPORT(${OMLMOTHERCHAN},OMLUNIQUEID)})

same => n,Set(__OMLYEARZERO=${EPOCH})

;same => n,Set(__OMLCODCLI=${SHARED(OMLCODCLI,${OMLMOTHERCHAN})})

; compruebo cantidad de llamadas activas concurrentes
;......
;......
;compruebo si estamos dentro de la hora establecida para llamar TC
;......
;......
;compruebo si no tengo que disparar algun AGI
;......
;......
;compruebo FLAG de ON/OFF de la campaña
;......
;......

;same => n(queueLog),Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},${OMLAGENTID},DIAL,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCAMPTYPE},,,,call))
same => n,Gosub(sub-oml-blacklist,s,1(${OMLOUTNUM},${OMLCALLTYPEID},${OMLCAMPID}))
same => n,GotoIf($["${GOSUB_RETVAL}" == "1"]?blacklistTrue)

same => n,Goto(oml-outr,${OMLOUTNUM},1)
same => n,Set(SHARED(OMLCALLSTATUS,${OMLMOTHERCHAN})=${OMLCALLSTATUS})
same => n,Gosub(sub-oml-hangup,s,1)

same => n(blacklistTrue),Set(SHARED(OMLCALLSTATUS,${OMLPREVIEWDIALOUTCHAN})=${DIALSTATUS})
same => n,Set(SHARED(OMLCALLSTATUS,${OMLMOTHERCHAN})=${DIALSTATUS})
same => n,Gosub(sub-oml-hangup,s,1)


[sub-oml-campaign-9]
; esta subrutina procesa los intentos de Ag2Out Transfer
; Es invocada por [oml-dial-out] (oml_extensions.conf)
; Sale en busca de una ruta saliente que encamine el OMLOUTNUM

include => sub-oml-campaign-9-custom

exten => s,1,Verbose(2, Welcome to ${CONTEXT} - Subrutine for ag2OutTransfer)

same => n,ExecIf($["${OMLTRANSFERTYPE}" != "consultTransferOutCall"]?Set(__OMLCAMPRECFILENAME=${SHARED(OMLCAMPRECFILENAME,${OMLMOTHERCHAN})}))
same => n,ExecIf($["${OMLTRANSFERTYPE}" == "consultTransferOutCall"]?Set(__OMLCALLSTATUS=CTOUT-TRY):Set(__OMLCALLSTATUS=BTOUT-TRY))
same => n,ExecIf($["${OMLTRANSFERTYPE}" == "consultTransferOutCall"]?Set(__OMLCODCLI=${SHARED(OMLCODCLI,${OMLMOTHERCHAN})}))
same => n,ExecIf($["${OMLCAMPTYPE}" == "2"]?Set(__OMLCODCLI=${SHARED(OMLCODCLI,${OMLMOTHERCHAN})}))

same => n,Set(__OMLAGENTID=${SHARED(OMLAGENTID,${OMLMOTHERCHAN})})
same => n,Set(__TRANSFERID=9)

same => n,Set(__OMLYEARZEROTRANSFER=${EPOCH})
same => n,Set(__OMLCALLWAITDURATION=${SHARED(OMLCALLWAITDURATION,${OMLMOTHERCHAN})})
same => n,Set(__OMLCALLDURATION=$[${EPOCH} - ${SHARED(OMLANSWERTIMESTAMP,${OMLMOTHERCHAN})}])

same => n,Set(SHARED(OMLCALLSTATUS,${OMLMOTHERCHAN})=${OMLCALLSTATUS})

same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},${OMLAGENTID}-${OMLOUTNUMTRANSFER},${OMLCALLSTATUS},${OMLOUTNUM},${OMLCODCLI},${TRANSFERID},${OMLCAMPTYPE},${OMLCALLWAITDURATION},${OMLCALLDURATION},${OMLCAMPRECFILENAME},call))

same => n,Goto(oml-outr,${OMLOUTNUMTRANSFER},1)
same => n,Gosub(sub-oml-hangup,s,1)


[sub-oml-dialout]
include => oml-dial-internal
include => oml-dial-out


; subrutine for dialout calls - pattern matching & trunk selection
; Es invocada por los [oml-outr-N] diferentes rutas salientes (oml_extensions_outr.conf)

include => sub-oml-dialout-custom

exten => s,1,Verbose(2, This sub put de OUTNUM on Trunk)

same => n,Gosub(sub-oml-set-chanvars,s,1(${ARG1},OUTR))

same => n,ExecIf($[${OMLCALLTYPEID} == 2]?Set(__OMLMOTHERCHAN=${CUT(CHANNEL,\;,1)}\;1))

same => n,GotoIf($["${OMLTRANSFERTYPE}" == "blindTransferOutCall"]?blindTransferOutCall)
same => n,GotoIf($["${OMLTRANSFERTYPE}" == "consultTransferOutCall"]?consultTransferOutCall)

same => n,Set(__OMLDIALBRIDGE=sub-oml-outcall-connect,s,1)
same => n,Set(__DIALARGNUM=${OMLOUTNUM})

; inicio While trunks SET
same => n(outrWhile),Set(OUTRCOUNTER=1)
same => n,While($[${OUTRCOUNTER} <= ${OMLOUTRTRUNKS}])

same => n,Set(__OMLCALLSTATUS=CANCEL)
same => n,Set(SHARED(OMLCALLSTATUS,${OMLC2CDIALOUTCHAN})=${OMLCALLSTATUS})
same => n,Set(SHARED(OMLCALLSTATUS,${OMLMOTHERCHAN})=${OMLCALLSTATUS})

same => n,Set(OMLTRUNK=${OMLOUTRTRUNK-${OUTRCOUNTER}})
same => n,Gosub(sub-oml-set-chanvars,s,1(${OMLTRUNK},TRUNK))

same => n,ExecIf($["${OMLTRUNKCALLERID}" != ""]?Set(CALLERID(all)=${OMLTRUNKCALLERID}))
same => n,ExecIf($["${OMLCAMPOUTCID}" != ""]?Set(CALLERID(all)=${OMLCAMPOUTCID}))
same => n,Progress()

same => n,ExecIf($["${OMLCALLTYPEID}" != "2"]?AGI(omni-agent-status.py,SET,${OMLAGENTID},DIALING,${EPOCH},${CUT(OMLCAMPQNAME,_,2)},${OMLOUTNUM}))
same => n,Dial(${OMLTRUNKTECH}/${OMLOUTRPREPEND-${ARG2}}${DIALARGNUM:${OMLOUTRPREFIX-${ARG2}}}@${OMLTRUNKNAME},${OMLOUTRRINGTIME},${OMLOUTROPTIONS}gU(${OMLDIALBRIDGE}^${OMLDIALBRIDGEARGS}))
same => n,Verbose(2, Dialstatus ${DIALSTATUS})

same => n,GotoIf($[ "${DIALSTATUS}" == "ANSWER" ]?gotoIf)
same => n,Set(SHARED(OMLCALLSTATUS,${OMLMOTHERCHAN})=${DIALSTATUS})
same => n,ExecIf($["${OMLTRANSFERTYPE}" == "blindTransferOutCall"]?Set(SHARED(OMLCALLSTATUS,${OMLMOTHERCHAN})=BTOUT-${DIALSTATUS}))
same => n,ExecIf($["${OMLTRANSFERTYPE}" == "blindTransferOutCall"]?Set(__OMLCALLSTATUS=BTOUT-${DIALSTATUS}))
same => n,ExecIf($["${OMLTRANSFERTYPE}" == "consultTransferOutCall"]?Set(SHARED(OMLCALLSTATUS,${OMLMOTHERCHAN})=CTOUT-${DIALSTATUS}))
same => n,ExecIf($["${OMLTRANSFERTYPE}" == "consultTransferOutCall"]?Set(__OMLCALLSTATUS=CTOUT-${DIALSTATUS}))
same => n(gotoIf),GotoIf($["${DIALSTATUS}" == "ANSWER"]?noFailoverAnswer)
same => n,GotoIf($["${DIALSTATUS}" == "BUSY"]?noFailoverBusy)
same => n,GotoIf($["${DIALSTATUS}" == "NOANSWER"]?noFailoverNoanswer)

same => n,Set(OUTRCOUNTER=${INC(OUTRCOUNTER)})
same => n,EndWhile(close)
; fin While trunks SET
same => n,Verbose(2, Dial failed DIALSTATUS = ${DIALSTATUS} - HANGUPCAUSE = ${HANGUPCAUSE})
same => n,UserEvent(CALLSTATUS,Uniqueid:${CHANNEL(linkedid)},V:RS_REJECTED)
same => n,Congestion(5)
same => n,Gosub(sub-oml-hangup,s,1(sub-oml-dialout no pudo cursar la llamada saliente))

same => n(noFailoverBusy),Verbose(2, Dial failed DIALSTATUS = ${DIALSTATUS} - HANGUPCAUSE = ${HANGUPCAUSE})
same => n,Playtones(busy)
same => n,Busy(5)
same => n,UserEvent(CALLSTATUS,Uniqueid:${CHANNEL(linkedid)},V:RS_BUSY)
same => n,Gosub(sub-oml-hangup,s,1(sub-oml-dialout no pudo cursar la llamada saliente))

same => n(noFailoverNoanswer),Verbose(2, Dial failed DIALSTATUS = ${DIALSTATUS} - HANGUPCAUSE = ${HANGUPCAUSE})
same => n,UserEvent(CALLSTATUS,Uniqueid:${CHANNEL(linkedid)},V:RS_NOANSWER)
same => n,Gosub(sub-oml-hangup,s,1(sub-oml-dialout no pudo cursar la llamada saliente))

same => n(noFailoverAnswer),Verbose(2, Dial answer DIALSTATUS = ${DIALSTATUS} - HANGUPCAUSE = ${HANGUPCAUSE})
same => n,Set(OMLSIDEHANGUP=${IF($["${DIALSTATUS}" = "ANSWER"]?1)})
same => n,ExecIf($[${OMLCALLTYPEID} == 4 || ${OMLCALLTYPEID} == 1]?Set(SHARED(OMLSIDEHANGUP,${OMLMOTHERCHAN})=${OMLSIDEHANGUP}))
same => n,Gosub(sub-oml-hangup,s,1(sub-oml-dialout no pudo cursar la llamada saliente))

same => n(blindTransferOutCall),Set(__OMLDIALBRIDGE=sub-oml-blind-transfer-outcall-connect)
same => n,Set(__OMLDIALBRIDGEARGS=${OMLUNIQUEID}^${OMLAGENTID}^${OMLCAMPQNAME}^${OMLMOTHERCHAN}^${OMLYEARZEROTRANSFER}^${OMLCAMPTYPE}^${OMLOUTNUMTRANSFER}^${OMLTRANSFERTYPE})
same => n,Set(__DIALARGNUM=${OMLOUTNUMTRANSFER})
same => n,Goto(outrWhile)

same => n(consultTransferOutCall),Set(CHANNEL(hangup_handler_push)=rip-ctout-aux-chan,s,1(${OMLOUTNUMTRANSFER}))
same => n,Set(__OMLDIALBRIDGE=sub-oml-consult-transfer-outcall-connect)
same => n,Set(__OMLDIALBRIDGEARGS=${OMLUNIQUEID}^${OMLAGENTID}^${OMLCAMPQNAME}^${OMLMOTHERCHAN}^${OMLYEARZEROTRANSFER}^${OMLCAMPTYPE}^${OMLOUTNUMTRANSFER}^${OMLTRANSFERTYPE})
same => n,Set(__DIALARGNUM=${OMLOUTNUMTRANSFER})
same => n,Goto(outrWhile)


[sub-oml-callstatus-blacklist-omdialed]
; En caso de ser un "Falso Answer" provocado en el canal PSTN aqui se mandan los callstatus a WD
; comprobacion de blacklist
; Es invocada por [sub-oml-campaign-2-deliver-contactcall]

include => sub-oml-callstatus-blacklist-omdialed-custom

exten => s,1,Verbose(2, comprobacion de blacklist)
same => n,AGI(omni-blacklist.py,${WOMBAT_DIALING_NUMBER})
same => n,Verbose(2, resultado del blacklist: ${BLACKLIST})
same => n,GotoIf($["${BLACKLIST}" == "0"]?nexttest)
same => n,UserEvent(CALLSTATUS,Uniqueid:${UNIQUEID},V:BLACKLIST)
same => n,Hangup()
; comprobacion de oml call
same => n(nexttest),Verbose(2, comprobacion de OML Dialednum)
same => n,AGI(omni-dialednum.py,${WOMBAT_DIALING_NUMBER},${ID_CAMPANA})
same => n,Verbose(2, resultado del oml dialednum: ${OMLDIALEDNUM})
same => n,GotoIf($["${OMLDIALEDNUM}" == "0"]?return)
same => n,UserEvent(CALLSTATUS,Uniqueid:${UNIQUEID},V:OMLDIALEDNUM)
same => n,Hangup()
same => n(return),Return()


[sub-oml-pre-agent-chan]
exten => s,1,Verbose(2, pre-dial agent PJSIP channel)
same => n,Set(__DYNAMIC_FEATURES=appondemandrec#appondemandrecstop)
same => n,Set(PJSIP_HEADER(add,OMLCALLID)=${OMLUNIQUEID})
same => n,Set(PJSIP_HEADER(add,Origin)=${OMLC2CHEADER})
same => n,Set(PJSIP_HEADER(add,IDCliente)=${OMLCODCLI})
same => n,Set(PJSIP_HEADER(add,IDCamp)=${OMLCAMPID})
same => n,Set(PJSIP_HEADER(add,OMLCAMPTYPE)=${OMLCAMPTYPE})
same => n,Set(PJSIP_HEADER(add,OMLCALLTYPEIDTYPE)=${OMLCALLTYPEID})
same => n,Set(PJSIP_HEADER(add,OMLOUTNUM)=${OMLOUTNUM})
same => n,ExecIf($["${OMLCAMPRECFILENAME}" == ""]?Set(OMLCAMPRECFILENAME=call-${UNIQUEID}))
same => n,ExecIf($["${OMLCAMPREC}" == "True"]?Set(PJSIP_HEADER(add,Omlrecfilename)=${OMLCAMPRECFILENAME}):Set(PJSIP_HEADER(add,Omlrecfilename)=))
same => n,Return()

[sub-oml-pre-agent-queue-chan]
exten => s,1,Verbose(2, pre-dial queue agent PJSIP set HEADERS)
same => n,Set(__DYNAMIC_FEATURES=appondemandrec#appondemandrecstop)
same => n,Set(PJSIP_HEADER(add,Origin)=IN)
same => n,Set(PJSIP_HEADER(add,OMLCALLID)=${OMLUNIQUEID})
same => n,Set(PJSIP_HEADER(add,IDCliente)=${OMLCODCLI})
same => n,Set(PJSIP_HEADER(add,IDCamp)=${OMLCAMPID})
same => n,Set(PJSIP_HEADER(add,OMLCAMPTYPE)=${OMLCAMPTYPE})
same => n,Set(PJSIP_HEADER(add,OMLCALLTYPEIDTYPE)=${OMLCALLTYPEID})
same => n,Set(PJSIP_HEADER(add,OMLOUTNUM)=${OMLOUTNUM})
same => n,ExecIf($["${OMLCAMPREC}" == "True"]?Set(PJSIP_HEADER(add,Omlrecfilename)=${OMLCAMPRECFILENAME}):Set(PJSIP_HEADER(add,Omlrecfilename)=))
same => n,Return()

[sub-oml-pre-agent-queue-chan-dialer]
exten => s,1,Verbose(2, pre-dial queue agent dialer-camps PJSIP set HEADERS)
same => n,Set(__DYNAMIC_FEATURES=appondemandrec#appondemandrecstop)
same => n,Set(PJSIP_HEADER(add,OMLCALLID)=${OMLUNIQUEID})
same => n,Set(PJSIP_HEADER(add,WombatID)=${WOMBAT_HOPPER_ID})
same => n,Set(PJSIP_HEADER(add,Origin)=DIALER-FORM)
same => n,Set(PJSIP_HEADER(add,IDCliente)=${OMLCODCLI})
same => n,Set(PJSIP_HEADER(add,IDCamp)=${OMLCAMPID})
same => n,Set(PJSIP_HEADER(add,OMLCAMPTYPE)=${OMLCAMPTYPE})
same => n,Set(PJSIP_HEADER(add,OMLCALLTYPEIDTYPE)=${OMLCALLTYPEID})
same => n,Set(PJSIP_HEADER(add,OMLOUTNUM)=${OMLOUTNUM})
same => n,ExecIf($["${OMLCAMPREC}" == "True"]?Set(PJSIP_HEADER(add,Omlrecfilename)=${OMLCAMPRECFILENAME}):Set(PJSIP_HEADER(add,Omlrecfilename)=))
same => n,Return()

[sub-oml-pre-agent-transfer-chan]
exten => s,1,Verbose(2, pre-dial queue agent AG2AG Transfer chan PJSIP set HEADERS)
same => n,Set(__DYNAMIC_FEATURES=appondemandrec#appondemandrecstop)
same => n,Set(PJSIP_HEADER(add,OMLCALLID)=${OMLUNIQUEID})
same => n,Set(PJSIP_HEADER(add,Origin)=transfer)
same => n,Set(PJSIP_HEADER(add,IDCliente)=${OMLCODCLI})
same => n,Set(PJSIP_HEADER(add,IDCamp)=${OMLCAMPID})
same => n,Set(PJSIP_HEADER(add,OMLCAMPTYPE)=${OMLCAMPTYPE})
same => n,Set(PJSIP_HEADER(add,OMLCALLTYPEIDTYPE)=${OMLCALLTYPEID})
same => n,Set(PJSIP_HEADER(add,OMLOUTNUM)=${OMLOUTNUM})
same => n,ExecIf($["${OMLCAMPREC}" == "True"]?Set(PJSIP_HEADER(add,OMLCAMPRECFILENAME)=${OMLCAMPRECFILENAME}):Set(PJSIP_HEADER(add,OMLCAMPRECFILENAME)=))
same => n,Set(PJSIP_HEADER(add,Transfer)=${ARG1})
same => n,Set(PJSIP_HEADER(add,OMLFROMAGENT)=${ARG2})
same => n,Return()

[sub-oml-pre-agent-camptransfer-chan]
exten => s,1,Verbose(2, pre-dial queue agent CAMPT chan PJSIP set HEADERS)
same => n,Set(__DYNAMIC_FEATURES=appondemandrec#appondemandrecstop)
same => n,Set(PJSIP_HEADER(add,Transfer)=3)
same => n,Set(PJSIP_HEADER(add,uidGrabacion)=${OMLUNIQUEID})
same => n,Set(PJSIP_HEADER(add,IDCliente)=${OMLCODCLI})
same => n,Set(PJSIP_HEADER(add,IDCamp)=${OMLCAMPTRANSFERID})
same => n,Set(PJSIP_HEADER(add,OMLOUTNUM)=${OMLOUTNUM})
same => n,Set(PJSIP_HEADER(add,OMLCALLTYPEIDTYPE)=${OMLCALLTYPEID})
same => n,Set(PJSIP_HEADER(add,OMLFROMAGENT)=${ARG1})
same => n,Return()

[sub-oml-pre-agent2agent-chan]
exten => s,1,Verbose(2, pre-dial agent2agent chan PJSIP set HEADERS)
same => n,Set(__DYNAMIC_FEATURES=appondemandrec#appondemandrecstop)
same => n,Set(PJSIP_HEADER(add,Origin)=agentCall)
same => n,Set(PJSIP_HEADER(add,OMLFROMAGENT)=${ARG1})
same => n,Return()

[sub-oml-pre-pbx2agent-chan]
exten => s,1,Verbose(2, pre-dial agent2agent chan PJSIP set HEADERS)
same => n,Set(__DYNAMIC_FEATURES=appondemandrec#appondemandrecstop)
same => n,Set(PJSIP_HEADER(add,Origin)=agentCall)
same => n,Set(PJSIP_HEADER(add,OMLFROMAGENT)=${OMLFROMPBXCID})
same => n,Return()
