; Copyright (C) 2018 Freetech Solutions

; This file is part of OMniLeads

; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.

; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.

; You should have received a copy of the GNU General Public License
; along with this program.  If not, see http://www.gnu.org/licenses/.

; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML         COMMON SUBRUTINES       OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML         COMMON SUBRUTINES       OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML         COMMON SUBRUTINES       OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML

[sub-oml-queuelog]
; Subrutina para el tratamiento de todos los QueueLogs

; Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},${OMLAGENTID},${OMLCALLSTATUS},${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCAMPTYPE},${OMLCALLWAITDURATION},${OMLCALLDURATION},,call))
; ARG1-OMLCAMPID, ARG2-UNIQUEID, ARG3-OMLAGENTID, ARG4-OMLEVENT, ARG5-OMLOUTNUM, ARG6-OMLCODCLI, ARG7-OMLCALLTYPEID
; ARG8-OMLCAMPTYPE, ARG9-OMLWAITCALLDURATION, ARG10-OMLCALLDURATION, ARG11-OMLCAMPRECFILENAME, ARG12-TYPEEVENT

; QueueLog(${ARG1}-${ARG8}-${ARG7},${ARG2},${ARG3},${ARG4},${ARG5},${ARG6},${ARG9},${ARG10},${ARG11})

; QueueLog Dialout Event-DIAL, data1-OMLOUTNUM, data2-OMLCODCLI
; QueueLog Dialout Event-ANSWER, data1-OMLOUTNUM, data2-OMLCODCLI, data3-OMLWAITCALLDURATION
; QueueLog Dialout Event-COMPLETEOUTNUM|COMPLETEAGENT, data1-OMLOUTNUM, data2-OMLCODCLI, data3-OMLWAITCALLDURATION, data4-OMLCALLCURARION
; QueueLog Dialout Event-!ANSWER, data1-OMLOUTNUM, data2-OMLCODCLI, data3-OMLWAITCALLDURATION

; QueueLog Queue Dialer Event-ENTERQUEUE, data1-OMLOUTNUM, data2-OMLCODCLI
; QueueLog Queue Dialer Event-CONNECT, data1-OMLOUTNUM, data3-ring duration, data5-OMLCAMPTYPEID, data6-OMLCODCLI
; QueueLog Queue Dialer Event-COMPLETEOUTNUM|COMPLETEAGENT, data1-OMLOUTNUM, data3-ring duration, data4-call duration, data5-OMLCAMPTYPEID, data6-OMLCODCLI
; QueueLog Queue Dialer Event-ABANDON, data1-OMLOUTNUM, data3-ring duration, data5-OMLCAMPTYPEID, data6-OMLCODCLI
; QueueLog Queue Dialer Event-EXPIREWITHTIMEOUT, data1-OMLOUTNUM, data3-ring duration, data5-OMLCAMPTYPEID, data6-OMLCODCLI

; QueueLog Queue Inbound Event-ENTERQUEUE, data1-OMLOUTNUM, data2-position, data5-OMLCAMPTYPEID, [data6-OMLCODCLI]
; QueueLog Queue Inbound Event-CONNECT, data1-OMLOUTNUM, data2-position, data3-ring duration, data5-OMLCAMPTYPEID, [data6-OMLCODCLI]
; QueueLog Queue Inbound Event-COMPLETEOUTNUM|COMPLETEAGENT, data1-OMLOUTNUM, data2-position, data3-ring duration, data4-call duration, data5-OMLCAMPTYPEID, [data6-OMLCODCLI]
; QueueLog Queue Inbound Event-ABANDON, data1-OMLOUTNUM, data2-position, data3-ring duration, data5-OMLCAMPTYPEID, [data6-OMLCODCLI]
; QueueLog Queue Inbound Event-EXPIREWITHTIMEOUT, data1-OMLOUTNUM, data2-position, data3-ring duration, data5-OMLCAMPTYPEID, [data6-OMLCODCLI]

include => sub-oml-queuelog-custom

exten => s,1,Verbose(2, Subrutine for qlog - EVENTTYPE:${ARG10})
same => n,Goto(${ARG12})

same => n(call),Verbose(2, qlog Call: ARG1->OMLCAMPID:${ARG1}, ARG2->UID:${ARG2}, ARG3->OMLAGENTID:${ARG3})
same => n,Verbose(2, qlog Call: ARG4->EVENT:${ARG4}, ARG5->OMLOUTNUM:${ARG5}, ARG6->OMLCODCLI:${ARG6})
same => n,Verbose(2, qlog Call: ARG7->OMLCALLTYPEID:${ARG7}, ARG8->OMLCAMPTYPE:${ARG8}, ARG9->OMLCALLWAITDURATION:${ARG9})
same => n,Verbose(2, qlog Call: ARG10->OMLCALLDURATION:${ARG10}, ARG11->OMLCAMPRECFILENAME:${ARG11})

same => n,ExecIf($[${ISNULL(${ARG9})}]?Set(ARG9=0))
same => n,GotoIf($["${ARG3}" != "dialer-dialout"]?while)
same => n,Set(ARG3=)

same => n(while),Set(COUNTER=1)
same => n,While($[${COUNTER} < 12])
same => n,ExecIf($[${ISNULL(${ARG${COUNTER}})}]?Set(ARG${COUNTER}=-1))
same => n,Set(COUNTER=${INC(COUNTER)})
same => n,EndWhile()

same => n,QueueLog(${ARG1}-${ARG8}-${ARG7},${ARG2},${ARG3},${ARG4},${ARG5}|${ARG6}|${ARG9}|${ARG10}|${ARG11})
same => n,Return()

same => n(pause),Verbose(2, qlog Pause: ARG1->UID:${ARG1}, ARG2->OMLAGENTID:${ARG2}, ARG3->OMLPAUSEID:${ARG3})
same => n,QueueLog(${ARG1},${ARG2},${ARG3},${ARG4},)
same => n,Return()

same => n(unpause),QueueLog(${ARG1},${ARG2},${ARG3},${ARG4},${ARG5})
same => n,Return()

same => n(login),QueueLog(${ARG1},${ARG2},${ARG3},${ARG4},)
same => n,Return()

same => n(logoff),QueueLog(${ARG1},${ARG2},${ARG3},${ARG4},)
same => n,Return()

[sub-oml-dst-switch]
; esta sub recibe como parámetros el tipo de obj a enrutar y el id del mismo
; puede ser invocada por los modulos de inr, outr, ivr, tc, queue, etc.
include => sub-oml-dst-switch-custom

exten => s,1,Verbose(2, "Un viaje de mil millas comienza con el primer paso" - Lao Tse)
same => n,Set(OMLDEST=${ARG1})
same => n,Set(OMLOBJID=${ARG2})
same => n,Gosub(${OBJ/${ARG1}}(${OMLOBJID}))
same => n,Return(FAIL-SWITCH)

[sub-oml-set-chanvars]
; subrutina de setting de OML-CHANVARS. Es invocada en el "nacimiento" de cada canal de OML de manera tal
; que cada canal (dentro de lo posible) cuente con las variables de canal generales de OML
; ARG1 OMLCAMPID | ARG1 OMLAGENTID | ARG1 OMLCODCLI
include => sub-oml-set-chanvars-custom

exten => s,1,Verbose(2, Set OML Channel Vars)
same => n,Goto(${ARG2})

same => n(CAMP),NoOp(aqui tiro el AGI)
same => n,AGI(omni-retrieve-conf.py,${ARG2},${ARG1})
same => n,ExecIf($["${OMLUNIQUEID}" == ""]?Set(__OMLUNIQUEID=${UNIQUEID}))
same => n,ExecIf($["${OMLCAMPQUEUETIME}" == "0"]?Set(__OMLCAMPQUEUETIME=10800))
same => n,Return()

same => n(IVR),NoOp(aqui tiro el AGI)
same => n,AGI(omni-retrieve-conf.py,${ARG2},${ARG1})
same => n,ExecIf($["${OMLUNIQUEID}" == ""]?Set(__OMLUNIQUEID=${UNIQUEID}))
same => n,Return()

same => n(TC),NoOp(aqui tiro el AGI)
same => n,AGI(omni-retrieve-conf.py,${ARG2},${ARG1})
same => n,ExecIf($["${OMLUNIQUEID}" == ""]?Set(__OMLUNIQUEID=${UNIQUEID}))
same => n,Return()

same => n(TG),NoOp(aqui tiro el AGI)
same => n,AGI(omni-retrieve-conf.py,${ARG2},${ARG1})
same => n,ExecIf($["${OMLUNIQUEID}" == ""]?Set(__OMLUNIQUEID=${UNIQUEID}))
same => n,Return()

same => n(TRUNK),NoOp(aqui tiro el AGI)
same => n,AGI(omni-retrieve-conf.py,${ARG2},${ARG1})
same => n,ExecIf($["${OMLUNIQUEID}" == ""]?Set(__OMLUNIQUEID=${UNIQUEID}))
same => n,Return()

same => n(INR),NoOp(aqui tiro el AGI)
same => n,AGI(omni-retrieve-conf.py,${ARG2},${ARG1})
same => n,ExecIf($["${OMLUNIQUEID}" == ""]?Set(__OMLUNIQUEID=${UNIQUEID}))
same => n,Return()

same => n(OUTR),NoOp(aqui tiro el AGI)
same => n,AGI(omni-retrieve-conf.py,${ARG2},${ARG1})
same => n,ExecIf($["${OMLUNIQUEID}" == ""]?Set(__OMLUNIQUEID=${UNIQUEID}))
same => n,Return()

same => n(CUSTOMERID),NoOp(aqui tiro el AGI)
same => n,AGI(omni-retrieve-conf.py,${ARG2},${ARG1})
same => n,ExecIf($["${OMLUNIQUEID}" == ""]?Set(__OMLUNIQUEID=${UNIQUEID}))
same => n,Return()

same => n(CUSTOMDST),NoOp(aqui tiro el AGI)
same => n,AGI(omni-retrieve-conf.py,${ARG2},${ARG1})
same => n,ExecIf($["${OMLUNIQUEID}" == ""]?Set(__OMLUNIQUEID=${UNIQUEID}))
same => n,Return()

same => n(agent),AGI(omni-agent-status.py,GET,${ARG1})
same => n,Return()

same => n(client),Verbose(2, el futuro es ilusorio)
same => n,Return()


[sub-oml-countdown]
; macro utilizada por bucles con contador

include => sub-oml-countdown-custom

exten => s,1,Verbose(2, Countdown sub for any dialplan loop)
same => n,Verbose(2, intento ${ARG1} de ${ARG2})
same => n,Set(XCOUNT=${INC(ARG1)})
same => n,GotoIf($[${ARG1} <= ${ARG2}]?return)
same => n,Verbose(2,End of the loop)
same => n,Return(0)
same => n(return),Return(${XCOUNT})

[sub-oml-recorder]
include => sub-oml-recorder-custom

exten => s,1,Verbose(2, RECORDER subrutine, FILENAME: ${ARG1})
same => n,ExecIf($["${ARG1}" == ""]?Set(ARG1=call))
same => n,MixMonitor(${OMLRECPATH}/${STRFTIME(${EPOCH},,${OMLRECDATEFORMAT})}/${ARG1}-${ARG2}.wav,b)
same => n,Set(SHARED(OMLCAMPRECFILENAME,${OMLMOTHERCHAN})=${ARG1}-${ARG2})
same => n,Set(__OMLCAMPRECFILENAME=${ARG1}-${ARG2})
same => n,Return()

[sub-oml-amd]
; Subrutina para detección de contestadores
include => sub-oml-amd-custom

exten => s,1,Verbose(2, AMD subrutine for camp ${ARG1})
same => n,GotoIf($["${OMLCAMPAMD}" == "True"]?amd)
same => n(amd_human),Return()

same => n(amd),AMD()
same => n,NoOp(AMDSTATUS=${AMDSTATUS})
same => n,GotoIf($["${AMDSTATUS}" == "MACHINE"]?amd_machine:amd_human)

same => n(amd_machine),NoOp(es una maquina)
same => n,Set(__OMLAMD=1)
same => n,UserEvent(CALLSTATUS,Uniqueid:${ARG2},V:CONTESTADOR)
same => n,Playback(${OMLCAMPAMDAUDIO})
same => n,Playback(${OMLCAMPAMDAUDIO})
same => n,Playback(${OMLCAMPAMDAUDIO})
same => n,Gosub(sub-oml-hangup,s,1)

[sub-oml-ncalls]
; Subrutina para conteo de llamadas concurrentes
include => sub-oml-ncalls-custom


[sub-oml-hangup]
; Subrutina de ejecución de hangup
include => sub-oml-hangup-custom

exten => s,1,Verbose(2, Hangup call)
same => n,Verbose(2, Todo fue un fugaz pensamiento en la mente del TODO)
same => n,Verbose(2, ${ARG1})
same => n,Hangup()

; Subrutina para comprobar blacklist (c2c, manual y preview) y blacklist & dialednum (dialer)
[sub-oml-blacklist]
exten => s,1,Verbose(2, OMLOUTNUM: ${ARG1}, OMLCALLTYPEID: ${ARG2}, OMLCAMPID: ${ARG3} )
same => n,GotoIf($[${ARG2} == 2]?dialerCall)
; manual, c2c, preview
same => n(otherCall),AGI(omni-blacklist.py,${ARG1})
same => n,Verbose(2, resultado del blacklist: ${BLACKLIST})
same => n,GotoIf($["${BLACKLIST}" == "1"]?blacklist,1)
same => n,Set(BLACKLIST=0)
same => n,Return(0)
; dialer call
same => n(dialerCall),Verbose(2, dialerCall Blacklist & Dialed number)
same => n,Verbose(2, number -${ARG1}- is in the blacklist)
same => n,AGI(omni-blacklist.py,${ARG1})
same => n,Verbose(2, blacklist result: ${BLACKLIST})
same => n,GotoIf($["${BLACKLIST}" == "1"]?blacklist,1)
same => n,Verbose(2, number -${ARG1}- was contacted previsly)
same => n,AGI(omni-dialednum.py,${ARG1},${ARG3})
same => n,Verbose(2, resultado del oml dialednum: ${OMLDIALEDNUM})
same => n,GotoIf($["${OMLDIALEDNUM}" == "1"]?falseanswer,1)
same => n,Return(0)

exten => falseanswer,1,Verbose(2, don't call, but insert a callstatus for WD)
same => n,Set(OMLDIALEDNUM=1)
same => n,Answer()

exten => blacklist,1,Verbose(2, is a blacklist num)
same => n,Set(__DIALSTATUS=BLACKLIST)
same => n,Playback(oml/${CHANNEL(language)}/oml-blacklist-number)
same => n,Return(1)


[sub-oml-failover-dst]
exten => s,1,Verbose(2, OMLCAMPID: ${ARG1})

same => n,GotoIf($["${OMLCAMPFAILOVER}" == "1"]?failoverCall)
same => n,Gosub(sub-oml-hangup,s,1)

same => n(failoverCall),Verbose(2, failover es true)
same => n,GotoIf($["${OMLCAMPTYPE}" == "2" && "${ARG2}" == "queue"]?dialerCall)
same => n,GotoIf($["${OMLCAMPTYPE}" == "3" && "${ARG2}" == "queue"]?inboundCall)
same => n,Verbose(2, failolver fail, not calltype for ${ARG1} camp)
same => n,Gosub(sub-oml-hangup,s,1)

same => n(dialerCall),Gosub(sub-oml-queuelog,s,1(${ARG1},${OMLUNIQUEID},${OMLAGENTID},EXITWITHTIMEOUT,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCAMPTYPE},${OMLCAMPQUEUETIME},,,call))
same => n,Goto(goFailoverDst)

same => n(inboundCall),ExecIf($["${CUT(OMLCAMPFAILOVERDST,\,,1)}" == "5"]?NoOp(failover is hangup):Gosub(sub-oml-queuelog,s,1(${ARG1},${OMLUNIQUEID},${OMLAGENTID},EXITWITHTIMEOUT,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCAMPTYPE},${OMLCAMPQUEUETIME},,,call)))
same => n,Goto(goFailoverDst)
same => n(goFailoverDst),Set(__OMLCALLSTATUS=FAILOVER)

; check dst - if dst is an in-camp StopMixMonitor
same => n,ExecIf($["${CUT(OMLCAMPFAILOVERDST,\,,1)}" != "1"]?StopMixMonitor(${OMLCAMPRECFILENAME}.wav))
same => n,ExecIf($["${CUT(OMLCAMPFAILOVERDST,\,,1)}" != "1"]?Set(OMLCAMPRECFILENAME=))

same => n(go2Dst),Verbose(2, failover class: ${CUT(OMLCAMPFAILOVERDST,\,,1)})
same => n,Set(__FAILOVERCLASS=${CUT(OMLCAMPFAILOVERDST,\,,1)})
same => n,Set(__OMLFAILOVER=true)
same => n,Set(__QUEUESTATUS=)
same => n,Set(__ABANDONED=)
same => n,Gosub(sub-oml-dst-switch,s,1(${OMLCAMPFAILOVERDST}))
same => n,Gosub(sub-oml-hangup,s,1)


[sub-oml-module-ivrbreakout]
include => sub-oml-module-ivrbreakout-custom

exten => _Z,1,Verbose(2, IVR Break Out ${ARG1})

same => n,Set(IVRBREAKOUT=TRUE)
same => n,GoSub(sub-oml-module-ivr,s,1(${OMLCAMPIVRBREAKOUTID}))
same => n,Hangup()


[sub-oml-ondemand-record]
exten => s,1,Verbose(2, ondemand call recording)

same => n(ondemand),Verbose(2, rec the ${OMLCAMPID} call ${OMLOUTNUM})
same => n,GotoIf($["${OMLCAMPREC}" == "True"]?return)
same => n,Set(__OMLCAMPRECFILENAME=ondemand)
same => n,GoSub(sub-oml-recorder,s,1(${OMLCAMPRECFILENAME},${OMLUNIQUEID}))
same => n,Set(SHARED(OMLCAMPRECFILENAME,${OMLMOTHERCHAN})=${OMLCAMPRECFILENAME})
same => n(return),Return()

[sub-oml-ondemand-record-stop]
exten => s,1,Verbose(2, ondemand call recording stop)
same => n,Verbose(2, rec the ${OMLCAMPID} call ${OMLOUTNUM})
same => n,StopMixMonitor(${OMLCAMPRECFILENAME}.wav)
same => n(return),Return()

[sub-oml-custom-dialplan-vars2headers]
exten => s,1,Verbose(2, convert custom dialplan chavars 2 agent sip headers)
same => n,Verbose(2, chanvars: ${ARG1})
same => n,While($["${SET(var=${SHIFT(ARG1,&)})}" != ""])
same => n,NoOp(var is ${var} - ${IMPORT(${OMLMOTHERCHAN},${var})})
same => n,ExecIf($["${var}" != ")"]?Set(PJSIP_HEADER(add,${var})=${IMPORT(${OMLMOTHERCHAN},${var})}))
same => n,EndWhile()
same => n,Return()

;

; same => n,Set(OMLTOCOUNT=1)
; same => n,Set(XCOUNT=1)
;
; same => n(while),Set(COUNTER=1)
; same => n,While($[${COUNTER} <= ${OMLIVROPTIONS}])
; same => n,GotoIf($["${OMLIVRDTMF}" == "${OMLIVROPTIONDTMF-${COUNTER}}"]?correctOpt)
; same => n,Set(COUNTER=${INC(COUNTER)})
; same => n,EndWhile()
