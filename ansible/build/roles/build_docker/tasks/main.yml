# Copyright (C) 2018 Freetech Solutions

# This file is part of OMniLeads

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.
---

- name: Delete omnileads_envars.sh
  file: path=/etc/profile.d/omnileads_envars.sh state=absent

# Se crea el directorio $USER_HOME/omnileads
- name: Create root path of docker omnileads
  file: path={{ docker_root }}/omnileads/ state=directory recurse=yes owner={{ docker_user }} group={{ docker_user }}

# Se incluyen las variables globales de docker
- name: Include docker global variables
  include_vars: group_vars/docker_general_vars.yml

# Se incluyen las variables para devenv
- name: Include docker devenv variables
  include_vars: group_vars/docker_devenv_vars.yml
  when: devenv == 1

# Se incluyen las variables para prodenv
- name: Include docker prodenv variables
  include_vars: group_vars/docker_prodenv_vars.yml
  when: prodenv == 1

# Estas tres primeras tasks tambien se hacen en los checks pero no incluyo todo el yml de checks pues solo necesito 3, asi que las pongo aca

- name: Get the network/submask configured in default interface
  shell: default_if=$(ip route show | awk '/^default/ {print $5}'); route | grep $default_if|tail -1 |awk -F " " '{print $1"/"$3}'
  register: network_submask
  changed_when: false

# Obtengo IP publica del nodo
- name: Get public IP address of node
  shell: curl ifconfig.me
  register: public_ip
  changed_when: false

- name: Check if custom and override files for dialplan exists
  shell: "[ -f {{ asterisk_location }}/etc/asterisk/oml_extensions_commonsub_custom.conf ]"
  changed_when: false
  failed_when: false
  delegate_to: localhost
  register: ast_custom_exists

# Creo los directorios que van a contener toda la data del build
- name: Create directories for build
  file: path={{ item }} state=directory recurse=yes owner={{ docker_user }} group={{ docker_user }}
  with_items:
    - "{{ ast_conf_location }}"
    - "{{ ast_agis_location }}"
    - "{{ ast_other_location }}"
    - "{{ ast_sounds_location}}/oml"
    - "{{ kamailio_location }}"
    - "{{ nginx_location }}/conf.d/consumers"
    - "{{ omniapp_location }}/ominicontacto"
    - "{{ build_location }}/scripts"

# Genera los dockerfiles en cada template esta lo que va a renderizar dependiendo si es prodenv o devenv
- name: Generate Dockerfiles images
  template: src=roles/build_docker/files/Dockerfiles/Dockerfile-{{ item }} dest={{ build_location}} owner={{ docker_user }} group={{ docker_user }}
  with_items:
    - asterisk
    - dialer
    - kamailio
    - nginx
    - omniapp
    - pbxemulator
    - postgresql

# Se incluyen las tareas de configuracion de asterisk para prodenv
- name: Creation of asterisk build content
  include: "{{ repo_location }}/deploy/ansible/roles/asterisk/tasks/configuration.yml"
  when: prodenv == 1

# Se incluye el codigo django de omnileads para prodenv
- name: Upload built (rsync to /ominicontacto)
  synchronize: "src={{ repo_location }}/{{ item }} dest={{ omniapp_location }}/ominicontacto delete=yes checksum=yes times=no"
  with_items:
    - api_app
    - configuracion_telefonia_app
    - manage.py
    - ominicontacto
    - ominicontacto_app
    - ominicontacto_voip
    - reciclado_app
    - reportes_app
    - requirements
    - supervision_app
    - test
    - tests
    - utiles_globales.py
  become: true
  become_method: su
  become_user: "{{ docker_user }}"
  when: prodenv == 1

# Se incluyen otros archivos que se necesitan para el build, que estan en otras fuentes
- name: Copy of Dockerfiles content
  copy: src={{ item.src }} dest={{ item.dest }}/ owner={{ docker_user }} group={{ docker_user }}
  with_items:
    - { src: roles/build_docker/files/pbxemulator-files, dest: "{{ build_location }}" }
    - { src: "{{ repo_location }}/requirements", dest: "{{ build_location }}" }
    - { src: "{{ repo_location }}/ominicontacto_voip/kamailio-files/kamailio.cfg", dest: "{{ kamailio_location }}" }

# Se generan los scripts y otros archivos de configuracion necesarios para el build
- name: Generate Dockerfiles content
  template: src={{ repo_location }}/ansible/deploy/{{ item.src }} dest={{ item.dest }} mode=755 owner={{ docker_user }} group={{ docker_user }}
  with_items:
    - { src: roles/docker/files/scripts/build-asterisk.sh, dest: "{{ build_location }}/scripts" }
    - { src: roles/docker/files/scripts/create_language.sh, dest: "{{ build_location }}/scripts" }
    - { src: roles/docker/files/scripts/run_asterisk.sh, dest: "{{ build_location }}/scripts" }
    - { src: roles/docker/files/scripts/run_omniapp.sh, dest: "{{ omniapp_location }}/run_omniapp.sh"}
    - { src: roles/omniapp_second/templates/bin/conversor.sh, dest: "{{ omniapp_location }}" }
    - { src: roles/omniapp_second/templates/run/oml_uwsgi.ini, dest: "{{ omniapp_location }}/oml_uwsgi.ini"}
    - { src: roles/omniapp_second/templates/etc/ominicontacto.conf, dest: "{{ nginx_location }}/conf.d"}
    - { src: roles/omniapp_second/templates/etc/nginx.conf.j2, dest: "{{ nginx_location }}/nginx.conf"}
    - { src: roles/docker/files/scripts/mime.types, dest: "{{ nginx_location }}/mime.types"}

# Se hace un login por consola en el dockerhub
- name: Log into DockerHub
  docker_login:
    username: "{{ docker_login_user }}"
    password: "{{ docker_login_pass }}"
    email: "{{ docker_login_email }}"
  when: build_images == "true"
  retries: 3
  delay: 3
  register: result
  until: result is success

# Se hace el build/push de las imagenes, dependiendo de si es DE o PE los valores de los tags de dockers van a ser diferentes
- name: Build images for PE and DE
  docker_image:
    build:
        path: "{{ build_location }}"
        dockerfile: Dockerfile-{{ item.dockerfile }}
        pull: yes
    name: "{{ docker_login_user }}/{{ item.image }}"
    source: build
    tag: "{{ item.version }}"
    force_source: yes
    force_tag: yes
    push: yes
  with_items:
    - { dockerfile: "asterisk", image: "asterisk", version: "{{ asterisk_builded_version }}" }
    - { dockerfile: "dialer", image: "dialer", version: "{{ wombat_version }}" }
    - { dockerfile: "omniapp", image: "omniapp", version: "{{ version }}" }
    - { dockerfile: "postgresql", image: "postgresql", version: "{{ postgresql_version }}" }
  when: build_images == "true"
  retries: 3
  delay: 3
  register: result
  until: result is success

# Se buildean/pushean las las imagenes de kamailio y nginx, exclusivas para PE
- name: Build {{ version }} images (PE)
  docker_image:
    build:
        path: "{{ build_location }}"
        dockerfile: Dockerfile-{{ item.dockerfile }}
        pull: yes
    name: "{{ docker_login_user }}/{{ item.image }}"
    source: build
    tag: "{{ item.version }}"
    force_source: yes
    force_tag: yes
    push: yes
  with_items:
    - { dockerfile: "kamailio", image: "kamailio", version: "{{ kamailio_builded_version }}" }
    - { dockerfile: "nginx", image: "nginx", version: "{{ nginx_builded_version }}" }
  when: prodenv == 1 and build_images == "true"
  retries: 3
  delay: 3
  register: result
  until: result is success

# Por ultimo se cambia los permisos de la carpeta raiz del entorno.
- name: Change ownership of {{ docker_root }}/omnileads folder
  file: state=directory owner={{ docker_user }} group={{ docker_user }} path={{ docker_root }}/omnileads recurse=yes
